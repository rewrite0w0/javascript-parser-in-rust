"use strict";(self.webpackChunkjavascript_parser_in_rust=self.webpackChunkjavascript_parser_in_rust||[]).push([[75],{4826:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var t=n(1527),s=n(7660);const o={id:"errors",title:"Dealing with Errors"},i=void 0,a={id:"errors",title:"Dealing with Errors",description:"Quoting from the Dragon Book",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/errors.md",sourceDirName:".",slug:"/errors",permalink:"/javascript-parser-in-rust/zh/docs/errors",draft:!1,unlisted:!1,editUrl:"https://github.com/oxc-project/javascript-parser-in-rust/tree/main/docs/errors.md",tags:[],version:"current",frontMatter:{id:"errors",title:"Dealing with Errors"},sidebar:"tutorialSidebar",previous:{title:"Parser",permalink:"/javascript-parser-in-rust/zh/docs/parser"},next:{title:"Semantic Analysis",permalink:"/javascript-parser-in-rust/zh/docs/semantics_analysis"}},c={},l=[{value:"The <code>Error</code> Trait",id:"the-error-trait",level:3},{value:"Fancy Error Report",id:"fancy-error-report",level:3}];function d(e){const r={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h3:"h3",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["Quoting from the ",(0,t.jsx)(r.a,{href:"https://www.amazon.com/Compilers-Principles-Techniques-Tools-2nd/dp/0321486811",children:"Dragon Book"})]}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"Most programming language specifications do not describe how a compiler should respond to errors; error handling is left to the compiler designer.\nPlanning the error handling right from the start can both simplify the structure of a compiler and improve its handling of errors."}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"A fully recoverable parser can construct an AST no matter what we throw at it.\nFor tools such as linter or formatter, one would wish for a fully recoverable parser so we can act on part of the program."}),"\n",(0,t.jsx)(r.p,{children:"A panicking parser will abort if there is any grammar mismatch, and a partially recoverable parser will recover from deterministic grammars."}),"\n",(0,t.jsxs)(r.p,{children:["For example, given a grammatically incorrect while statement ",(0,t.jsx)(r.code,{children:"while true {}"}),", we know it is missing round brackets,\nand the only punctuation it can have are round brackets, so we can still return a valid AST and indicate its missing brackets."]}),"\n",(0,t.jsx)(r.p,{children:"Most JavaScript parsers out there are partially recoverable, so we'll do the same and build a partially recoverable parser."}),"\n",(0,t.jsx)(r.admonition,{type:"info",children:(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.a,{href:"https://github.com/rome/tools",children:"Rome"})," parser is a fully recoverable parser."]})}),"\n",(0,t.jsxs)(r.p,{children:["Rust has the ",(0,t.jsx)(r.code,{children:"Result"})," type for returning and propagating errors.\nIn conjunction with the ",(0,t.jsx)(r.code,{children:"?"})," syntax, the parse functions will remain simple and clean."]}),"\n",(0,t.jsx)(r.p,{children:"It is common to wrap the Result type so we can replace the error later:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:"pub type Result<T> = std::result::Result<T, ()>;\n"})}),"\n",(0,t.jsx)(r.p,{children:"Our parse functions will return a Result, for example:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:"pub fn parse_binding_pattern(&mut self, ctx: Context) -> Result<BindingPattern<'a>> {\n    match self.cur_kind() {\n        Kind::LCurly => self.parse_object_binding_pattern(ctx),\n        Kind::LBrack => self.parse_array_binding_pattern(ctx),\n        kind if kind.is_binding_identifier() => {\n          // ... code omitted\n        }\n        // highlight-next-line\n        _ => Err(()),\n    }\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["We can add an ",(0,t.jsx)(r.code,{children:"expect"})," function for returning an error if the current token does not match the grammar:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:"/// Expect a `Kind` or return error\npub fn expect(&mut self, kind: Kind) -> Result<()> {\n    if !self.at(kind) {\n        return Err(())\n    }\n    self.advance();\n    Ok(())\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"And use it as such:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:"pub fn parse_paren_expression(&mut self, ctx: Context) -> Result<Expression> {\n    self.expect(Kind::LParen)?;\n    let expression = self.parse_expression(ctx)?;\n    self.expect(Kind::RParen)?;\n    Ok(expression)\n}\n"})}),"\n",(0,t.jsx)(r.admonition,{type:"note",children:(0,t.jsxs)(r.p,{children:["For completeness, the lexer function ",(0,t.jsx)(r.code,{children:"read_next_token"})," should also return ",(0,t.jsx)(r.code,{children:"Result"}),"\nwhen an unexpected ",(0,t.jsx)(r.code,{children:"char"})," is found when lexing."]})}),"\n",(0,t.jsxs)(r.h3,{id:"the-error-trait",children:["The ",(0,t.jsx)(r.code,{children:"Error"})," Trait"]}),"\n",(0,t.jsxs)(r.p,{children:["To return specific errors, we need to fill in the ",(0,t.jsx)(r.code,{children:"Err"})," part of ",(0,t.jsx)(r.code,{children:"Result"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:"pub type Result<T> = std::result::Result<T, SyntaxError>;\n                                            ^^^^^^^^^^^\n#[derive(Debug)]\npub enum SyntaxError {\n    UnexpectedToken(String),\n    AutoSemicolonInsertion(String),\n    UnterminatedMultiLineComment(String),\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["We call it ",(0,t.jsx)(r.code,{children:"SyntaxError"}),' because all "early error"s defined in the grammar section of the ECMAScript specification are syntax errors.']}),"\n",(0,t.jsxs)(r.p,{children:["To make this a proper ",(0,t.jsx)(r.code,{children:"Error"}),", it needs to implement the ",(0,t.jsxs)(r.a,{href:"https://doc.rust-lang.org/std/error/trait.Error.html",children:[(0,t.jsx)(r.code,{children:"Error"})," Trait"]}),". For cleaner code, we can use macros from the ",(0,t.jsx)(r.a,{href:"https://docs.rs/thiserror/latest/thiserror",children:(0,t.jsx)(r.code,{children:"thiserror"})})," crate:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'#[derive(Debug, Error)]\npub enum SyntaxError {\n    #[error("Unexpected Token")]\n    UnexpectedToken,\n\n    #[error("Expected a semicolon or an implicit semicolon after a statement, but found none")]\n    AutoSemicolonInsertion,\n\n    #[error("Unterminated multi-line comment")]\n    UnterminatedMultiLineComment,\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["We can then add an ",(0,t.jsx)(r.code,{children:"expect"})," helper function for throwing an error if the token does not match:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:"/// Expect a `Kind` or return error\npub fn expect(&mut self, kind: Kind) -> Result<()> {\n    if self.at(kind) {\n        return Err(SyntaxError::UnExpectedToken);\n    }\n    self.advance(kind);\n    Ok(())\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"parse_debugger_statement"})," can now use the ",(0,t.jsx)(r.code,{children:"expect"})," function for proper error management:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:"fn parse_debugger_statement(&mut self) -> Result<Statement> {\n    let node = self.start_node();\n    self.expect(Kind::Debugger)?;\n    Ok(Statement::DebuggerStatement {\n        node: self.finish_node(node),\n    })\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Notice the ",(0,t.jsx)(r.code,{children:"?"})," after the ",(0,t.jsx)(r.code,{children:"expect"}),",\nit is a syntactic sugar called the ",(0,t.jsx)(r.a,{href:"https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator",children:'"question mark operator"'})," for making the\nfunction return early if the ",(0,t.jsx)(r.code,{children:"expect"})," function returns a ",(0,t.jsx)(r.code,{children:"Err"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"fancy-error-report",children:"Fancy Error Report"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://docs.rs/miette/latest/miette",children:(0,t.jsx)(r.code,{children:"miette"})})," is one of the nicest error reporting crate out there,\nit provides a fancy colored output"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{src:"https://raw.githubusercontent.com/zkat/miette/main/images/serde_json.png",alt:"miette"})}),"\n",(0,t.jsxs)(r.p,{children:["Add ",(0,t.jsx)(r.code,{children:"miette"})," to your ",(0,t.jsx)(r.code,{children:"Cargo.toml"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-toml",children:'[dependencies]\nmiette = { version = "5", features = ["fancy"] }\n'})}),"\n",(0,t.jsxs)(r.p,{children:["We can wrap our ",(0,t.jsx)(r.code,{children:"Error"})," with ",(0,t.jsx)(r.code,{children:"miette"})," and not modify the ",(0,t.jsx)(r.code,{children:"Result"})," type defined in our parser:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'pub fn main() -> Result<()> {\n    let source_code = "".to_string();\n    let file_path = "test.js".to_string();\n    let mut parser = Parser::new(&source_code);\n    parser.parse().map_err(|error| {\n        miette::Error::new(error).with_source_code(miette::NamedSource::new(file_path, source_code))\n    })\n}\n'})})]})}function h(e={}){const{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},7660:(e,r,n)=>{n.d(r,{Z:()=>a,a:()=>i});var t=n(959);const s={},o=t.createContext(s);function i(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);