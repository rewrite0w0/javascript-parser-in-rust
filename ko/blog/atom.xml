<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://oxc-project.github.io/javascript-parser-in-rust/ko/blog</id>
    <title>Write a JavaScript Parser in Rust Blog</title>
    <updated>2023-11-12T16:10:41.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog"/>
    <subtitle>Write a JavaScript Parser in Rust Blog</subtitle>
    <entry>
        <title type="html"><![CDATA[Rome Tools]]></title>
        <id>https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/rome</id>
        <link href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/rome"/>
        <updated>2023-11-12T16:10:41.000Z</updated>
        <summary type="html"><![CDATA[Rome은, JavaScript와 TypeScript 파서의 여러 기술을 사용합니다. 이 튜토리얼은 이를 이해하기 쉽게 순서를 요약합니다.]]></summary>
        <content type="html"><![CDATA[<p>Rome은, JavaScript와 TypeScript 파서의 여러 기술을 사용합니다. 이 튜토리얼은 이를 이해하기 쉽게 순서를 요약합니다.</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="역사">역사<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/rome#%EC%97%AD%EC%82%AC" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<ul>
<li>Rome 코드 기반은 TypeScript에서 Rust로 재작성되었습니다. 상세한 내용은 <a href="https://rome.tools/blog/2021/09/21/rome-will-be-rewritten-in-rust" target="_blank" rel="noopener noreferrer">Rome will be rewritten in Rust</a> 를 통해 확인 가능합니다.</li>
<li>이 결정은, <a href="https://github.com/rslint/rslint" target="_blank" rel="noopener noreferrer">rslint</a>와 <a href="https://github.com/rust-lang/rust-analyzer" target="_blank" rel="noopener noreferrer">rust-analyzer</a> 저자와 대화 후의 결과입니다.</li>
<li>rust-analyzer는, IDE 같은 도구를 추상 구문 트리 기반으로 구축하다는 것을 증명했습니다.</li>
<li>rslint는, rust-analyzer에 사용되어 있던 라이브러리를 사용해,  Rust에서 JavaScript 파서를 구현 가능하다는 것을 증명했습니다.</li>
<li>Rome은, 저자의 허가를 받아 rslint 코드 기반을 자신들의 레포지토리에 이직했습니다.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="추상-구문-트리-cst">추상 구문 트리 (CST)<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/rome#%EC%B6%94%EC%83%81-%EA%B5%AC%EB%AC%B8-%ED%8A%B8%EB%A6%AC-cst" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<ul>
<li>기반 라이러리리는 <a href="https://github.com/rust-analyzer/rowan" target="_blank" rel="noopener noreferrer">rowan</a>이며, 상세한 내용은 <a href="https://github.com/rust-lang/rust-analyzer/blob/master/docs/dev/syntax.md" target="_blank" rel="noopener noreferrer">overview of rowan</a> 를 확인해주시길 바랍니다.</li>
<li>Rowan (red-green trees 로 알려져있음) 은, 붉은 열매로 완성되어 <a href="https://en.wikipedia.org/wiki/Rowan" target="_blank" rel="noopener noreferrer">Rowan</a> 이 나무 이름으로 명명되었습니다.</li>
<li>red-green trees 유래는, C# 저자에 의한 <a href="https://ericlippert.com/2012/06/08/red-green-trees/" target="_blank" rel="noopener noreferrer">블로그</a>에 설명되어 있습니다.</li>
<li>Rowan은, 손실없이 소스코드 전부를 기술하는 CST를 정의, 구문 트리 부모, 자식, 형제 노드를 조사하는 일련의 API를 제공합니다.</li>
<li>AST 보다도 CST를 이용하는 이점에 대해서는, <a href="https://rdambrosio016.github.io/rust/2020/09/18/pure-ast-based-linting-sucks.html" target="_blank" rel="noopener noreferrer">Pure AST based linting sucks</a> 를 확인해주세요.</li>
<li>CST는 완전히 회복 가능한 파서를 구축하는 수단을 제공합니다.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="문법">문법<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/rome#%EB%AC%B8%EB%B2%95" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<ul>
<li>AST 와 동등한 문법을 정의 할 필요가 있습니다. 문법은, <a href="https://github.com/rome/tools/tree/main/xtask/codegen" target="_blank" rel="noopener noreferrer">xtask/codegen</a> 를 사용해 자동생성됩니다.</li>
<li>문법은 <a href="https://github.com/rust-analyzer/ungrammar" target="_blank" rel="noopener noreferrer">ungrammar</a> DSL에서 생서됩니다.</li>
<li>입력은 <code>ungrammar</code>의 소스파일, <a href="https://github.com/rome/tools/blob/main/xtask/codegen/js.ungram" target="_blank" rel="noopener noreferrer">xtask/codegen/js.ungram</a>에 있습니다.</li>
<li>생성된 코드는,  <a href="https://github.com/rome/tools/tree/main/crates/rome_js_syntax/src/generated" target="_blank" rel="noopener noreferrer">rome_js_syntax/src/generated</a>에 있습니다.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="엔트리-포인트">엔트리 포인트<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/rome#%EC%97%94%ED%8A%B8%EB%A6%AC-%ED%8F%AC%EC%9D%B8%ED%8A%B8" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>Rome 코드 기반은 비대해져서, 파서의 엔트리 포인트를 발견하기가 조금 어려워졌습니다.</p>
<p>첫 경험인 분을 위해, 코드를 실해하기 위한 바이너리 엔트리 포인트 <code>rome_cli</code> 크레이트를 봅시다.</p>
<div class="language-bash codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-bash codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">cargo run -p rome_cli</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">touch test.js</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cargo run -p rome_cli -- check ./test.js</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>rome_cli</code> 최종적으로 <code>rome_js_parser::parse</code>를 호출합니다.</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">https</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token plain">github</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">com</span><span class="token operator">/</span><span class="token plain">rome</span><span class="token operator">/</span><span class="token plain">tools</span><span class="token operator">/</span><span class="token plain">blob</span><span class="token operator">/</span><span class="token plain">9815467c66688773bc1bb6ef9a5b2d86ca7b3682</span><span class="token operator">/</span><span class="token plain">crates</span><span class="token operator">/</span><span class="token plain">rome_js_parser</span><span class="token operator">/</span><span class="token plain">src</span><span class="token operator">/</span><span class="token plain">parse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">rs#</span><span class="token constant" style="color:rgb(189, 147, 249)">L178</span><span class="token operator">-</span><span class="token constant" style="color:rgb(189, 147, 249)">L187</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>실제 파서 코드는 이렇게 시작됩니다.</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">https</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token plain">github</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">com</span><span class="token operator">/</span><span class="token plain">rome</span><span class="token operator">/</span><span class="token plain">tools</span><span class="token operator">/</span><span class="token plain">blob</span><span class="token operator">/</span><span class="token plain">9815467c66688773bc1bb6ef9a5b2d86ca7b3682</span><span class="token operator">/</span><span class="token plain">crates</span><span class="token operator">/</span><span class="token plain">rome_js_parser</span><span class="token operator">/</span><span class="token plain">src</span><span class="token operator">/</span><span class="token plain">syntax</span><span class="token operator">/</span><span class="token plain">program</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">rs#</span><span class="token constant" style="color:rgb(189, 147, 249)">L14</span><span class="token operator">-</span><span class="token constant" style="color:rgb(189, 147, 249)">L17</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="공헌">공헌<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/rome#%EA%B3%B5%ED%97%8C" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<ul>
<li><a href="https://github.com/rome/tools/blob/main/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">CONTRIBUTING.md</a>에는, 공헌 방법에 대해 설명되어 있습니다.</li>
<li><a href="https://rome.github.io/tools/rome_js_parser/index.html" target="_blank" rel="noopener noreferrer">rome_js_parser crate doc</a> 에는, 파서와 관련된 구현 설명이 있습니다.</li>
<li>파서 테스트에 대해서는, <a href="https://github.com/rome/tools/tree/main/xtask/codegen#cargo-codegen-test" target="_blank" rel="noopener noreferrer"><code>cargo codegen test</code></a> 확인해주세요.</li>
<li>적합 테스트에 관해서는,  <a href="https://github.com/rome/tools/tree/main/xtask/coverage" target="_blank" rel="noopener noreferrer"><code>cargo coverage</code></a> 확인해주세요.</li>
<li>잘 모르는 부분이 있다면, <a href="https://discord.com/invite/rome" target="_blank" rel="noopener noreferrer">Discord 서버</a> 에서 자유로히 질문 가능합니다.</li>
</ul>
<div class="theme-admonition theme-admonition-info admonition_orRc alert alert--info"><div class="admonitionHeading__xcM"><span class="admonitionIcon_s9h2"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>정보</div><div class="admonitionContent_SBYU"><p>JavaScript / TypeScript 파서는 99% 완성되어 있습니다. 공헌의 최선의 방법은, 독자 코드 기반에 Rome 테스트하거나, <a href="https://github.com/rome/tools/issues" target="_blank" rel="noopener noreferrer">Github Issue</a>를 확인하는 것입니다.</p></div></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript 문법]]></title>
        <id>https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar</id>
        <link href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar"/>
        <updated>2023-11-12T16:10:41.000Z</updated>
        <summary type="html"><![CDATA[자바스크립트는 파싱이 가장 어려운 문법 중 하나입니다, 이 튜토리얼에서는 제가 이 문법을 배우면서 흘린 땀과 눈물을 설명해드리겠습니다.]]></summary>
        <content type="html"><![CDATA[<p>자바스크립트는 파싱이 가장 어려운 문법 중 하나입니다, 이 튜토리얼에서는 제가 이 문법을 배우면서 흘린 땀과 눈물을 설명해드리겠습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="ll1-문법">LL(1) 문법<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#ll1-%EB%AC%B8%EB%B2%95" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p><a href="https://en.wikipedia.org/wiki/LL_grammar" target="_blank" rel="noopener noreferrer">위키백과</a>에 따르면,</p>
<blockquote>
<p>LL grammar은 문맥에 구애받지 않는 문법으로, 입력을 왼쪽에서 오른쪽으로 파싱하는 LL 파서로 파싱할 수 있습니다.</p>
</blockquote>
<p>첫 번째 <strong>L</strong> 의 의미는 왼쪽에서 오른쪽으로 소스를 스캔한다는 것입니다,
두 번째 <strong>L</strong> 의 의미는 가장 왼쪽에서부터 파생 트리를 구성한다는 것을 입니다.</p>
<p>컨텍스트에서 자유로운 LL(1)은 (1)의 다음 토큰을 봄으로 트리를 구성할 수 있다는 뜻입니다.</p>
<p>LL Grammars이 학계에서 특히 관심을 끄는 이유는 우리는 게으른 인간이기에 수동으로 파서를 작성할 필요가 없도록 파서를 자동생성해주는 프로그램을 쓰고 싶지 때문입니다.</p>
<p>아쉽지만 대부분의 산업용 프로그래밍 언어는 LL(1) grammar가 없으며, JavaScript도 마찬가지입니다.</p>
<div class="theme-admonition theme-admonition-info admonition_orRc alert alert--info"><div class="admonitionHeading__xcM"><span class="admonitionIcon_s9h2"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>정보</div><div class="admonitionContent_SBYU"><p>Mozilla는 수년 전<a href="https://github.com/mozilla-spidermonkey/jsparagus" target="_blank" rel="noopener noreferrer">jsparagus</a> 프로젝트를 시작했습니다.
그들은 과거 2년간 그다지 업데이트가 없었고, <a href="https://github.com/mozilla-spidermonkey/jsparagus/blob/master/js-quirks.md" target="_blank" rel="noopener noreferrer">js-quirks.md</a>가 마지막 강한 메세지를 남깁니다.</p><blockquote>
<p>오늘 뭘 배웠지?</p>
<ul>
<li>JS 파서를 작성하면 안 됨.</li>
<li>JavaScript에는 몇 가지 구문적으로 어두운 존재가 있음. 하지만 모든 실수를 피한다 해서 세계에서 가장 널리 사용되는 프로그래밍 언어를 만들 수 없음. 적절한 사용자를 위해 적절한 상황을 위해, 적절한 도구를 만들 뿐이다.</li>
</ul>
</blockquote></div></div>
<hr>
<p>JavaScript 파싱에서 유일하게 실용적인 방법은 문법 성질 상, 재귀적 강하하는 파서를 작성하는 것입니다.
그러니 발등 찍히기 전에 문법의 모든 기묘한 점을 배워봅시다.</p>
<p>아래 목록은 간단하게 시작하지만 이해는 어려울 수 있습니다,
차 마시며 느긋하게 읽어보세요.</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="identifiers식별자">Identifiers(식별자)<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#identifiers%EC%8B%9D%EB%B3%84%EC%9E%90" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p><code>#sec-identifiers</code> 정의된 식별자에는 세가지 타입이 있습니다.</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">IdentifierReference[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">BindingIdentifier[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">LabelIdentifier[Yield, Await] :</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>estree</code> 와 일부 AST는 위의 식별자를 구문으로 쓰지 않습니다.
또한 사양서는 그냥 글로 설명되어 있지 않습니다.</p>
<p><code>BindingIdentifier</code> 선언, <code>IdentifierReference</code> 바인딩 식별자에 대한 참조입니다.
예를 들어 <code>var foo = bar</code>, <code>foo</code> 는 <code>BindingIdentifier</code>이며 <code>bar</code>는 <code>IdentifierReference</code> 입니다:</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">VariableDeclaration[In, Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    BindingIdentifier[?Yield, ?Await] Initializer[?In, ?Yield, ?Await] opt</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Initializer[In, Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    = AssignmentExpression[?In, ?Yield, ?Await]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>AssignmentExpression</code>를 <code>PrimaryExpression</code> 대로 따르면 다음과 같이 됩니다.</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">PrimaryExpression[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    IdentifierReference[?Yield, ?Await]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>AST 안에 이들 식별자를 다른 형태를 선언함은 특히 의미 해석에 따라 하방 도구에 큰 영향을 끼칩니다.</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token type-definition class-name">BindingIdentifier</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Atom</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token type-definition class-name">IdentifierReference</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Atom</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="class-and-strict-mode클래스와-엄격-모드">Class and Strict Mode(클래스와 엄격 모드)<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#class-and-strict-mode%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%97%84%EA%B2%A9-%EB%AA%A8%EB%93%9C" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>ECMAScript 클래스는 엄격모드 이후에 만들어 졌기에 클래스 내부에 모든 것이 엄격적이어야 했습니다. 이는 <code>#sec-class-definitions</code>에 <code>Node: A class definition is always strict mode code.</code>로 설명됩니다.</p>
<p>함수 스코프와 연관된 엄격 모드를 선언하는 것이 가능하지만 <code>class</code> 선언에는 범위가 없습니다,
클래스를 파싱하기 위해서는 추가로 상태를 갖을 필요가 있습니다.</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">https</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token plain">github</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">com</span><span class="token operator">/</span><span class="token plain">swc</span><span class="token operator">-</span><span class="token plain">project</span><span class="token operator">/</span><span class="token plain">swc</span><span class="token operator">/</span><span class="token plain">blob</span><span class="token operator">/</span><span class="token plain">f9c4eff94a133fa497778328fa0734aa22d5697c</span><span class="token operator">/</span><span class="token plain">crates</span><span class="token operator">/</span><span class="token plain">swc_ecma_parser</span><span class="token operator">/</span><span class="token plain">src</span><span class="token operator">/</span><span class="token plain">parser</span><span class="token operator">/</span><span class="token plain">class_and_fn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">rs#</span><span class="token constant" style="color:rgb(189, 147, 249)">L85</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="legacy-octal-and-use-strict오래된-8진수과-use-strict">Legacy Octal and Use Strict(오래된 8진수과 use strict)<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#legacy-octal-and-use-strict%EC%98%A4%EB%9E%98%EB%90%9C-8%EC%A7%84%EC%88%98%EA%B3%BC-use-strict" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p><code>#sec-string-literals-early-errors</code>는 문자열 <code>"\01"</code> 내에서 이스케이프된 오래된 8진수을 허용하지 않습니다:</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">EscapeSequence ::</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    LegacyOctalEscapeSequence</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    NonOctalDecimalEscapeSequence</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">It is a Syntax Error if the source text matched by this production is strict mode code.</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이를 검출하기 위해 가장 좋은 곳은 lexer 안으로, 파서에 엄격 모드 상태를 묻고, 이에 따라 에러를 던질 수 있습니다.</p>
<p>그러나 directives가 섞이면 이는 불가능하다:</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token plain">github</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">com</span><span class="token operator">/</span><span class="token plain">tc39</span><span class="token operator">/</span><span class="token plain">test262</span><span class="token operator">/</span><span class="token plain">blob</span><span class="token operator">/</span><span class="token plain">747bed2e8aaafe8fdf2c65e8a10dd7ae64f66c47</span><span class="token operator">/</span><span class="token plain">test</span><span class="token operator">/</span><span class="token plain">language</span><span class="token operator">/</span><span class="token plain">literals</span><span class="token operator">/</span><span class="token plain">string</span><span class="token operator">/</span><span class="token plain">legacy</span><span class="token operator">-</span><span class="token plain">octal</span><span class="token operator">-</span><span class="token plain">escape</span><span class="token operator">-</span><span class="token plain">sequence</span><span class="token operator">-</span><span class="token plain">prologue</span><span class="token operator">-</span><span class="token plain">strict</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">js</span><span class="token plain">#</span><span class="token constant" style="color:rgb(189, 147, 249)">L16</span><span class="token operator">-</span><span class="token constant" style="color:rgb(189, 147, 249)">L19</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>use strict</code> 는 에스케이프된 오래된 8진수 뒤에 선언되어 있지만, 구문 에러를 던질 필요가 있습니다.
다행스럽게도, 실제 코드에서 오래된 8진수의 directives를 사용할 수 없습니다.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="non-simple-parameter-and-strict-mode간단하지-않은-파라메터와-엄격모드">Non-simple Parameter and Strict Mode(간단하지 않은 파라메터와 엄격모드)<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#non-simple-parameter-and-strict-mode%EA%B0%84%EB%8B%A8%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%80-%ED%8C%8C%EB%9D%BC%EB%A9%94%ED%84%B0%EC%99%80-%EC%97%84%EA%B2%A9%EB%AA%A8%EB%93%9C" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>비엄격 모드에서는 동일 함수 파라메터를 사용할 수 있습니다.<code>function foo(a, a) { }</code>,
그리고 사용 엄격으로 막을 수 있습니다 <code>use strict</code>: <code>function foo(a, a) { "use strict" }</code>.
es6 이후에는, 함수 매개 변수에 다른 문법이 추가 되었습니다. 예시: <code>function foo({ a }, b = c) {}</code>.</p>
<p>그럼 "01"가 엄격 모드 에러인 경우 다음과 같이 작성 가능할까요?</p>
<div class="language-javaScript language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">value</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"\01"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"use strict"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>더 구체적으로, 파서가 봤을 때 파라메터 내부에 엄격모드 구문 에러가 있을 경우 어떻게 될까요? 그래서, <code>#sec-function-definitions-static-semantics-early-errors</code>, 에는 다음과 같은 것이 금지됩니다.</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">FunctionDeclaration :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">FunctionExpression :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">It is a Syntax Error if FunctionBodyContainsUseStrict of FunctionBody is true and IsSimpleParameterList of FormalParameters is false.</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>크롬은 이 에러를 "Uncaught SyntaxError: Illegal 'use strict' directive in function with non-simple parameter list"라 의문의 메세지를 던집니다.</p>
<p>상세한 설명은 ESLint의 저자의 <a href="https://humanwhocodes.com/blog/2016/10/the-ecmascript-2016-change-you-probably-dont-know/" target="_blank" rel="noopener noreferrer">글</a>에 게시되어 있습니다.</p>
<div class="theme-admonition theme-admonition-info admonition_orRc alert alert--info"><div class="admonitionHeading__xcM"><span class="admonitionIcon_s9h2"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>정보</div><div class="admonitionContent_SBYU"><p>재밌는 사실은 TypeScript에서 <code>es5</code> 타겟하는 경우 상기한 규칙에서 벗어납니다.</p><div class="language-javaScript language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">a</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"use strict"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">b </span><span class="token operator">===</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> b </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"\01"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="parenthesized-expression괄호로-묶은-표현">Parenthesized Expression(괄호로 묶은 표현)<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#parenthesized-expression%EA%B4%84%ED%98%B8%EB%A1%9C-%EB%AC%B6%EC%9D%80-%ED%91%9C%ED%98%84" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>괄호 안에 표현식에는 어떤 의미론적 의미가 없을까요?
가령 <code>((x))</code> 에 AST는 <code>ParenthesizedExpression</code> -&gt; <code>ParenthesizedExpression</code> -&gt; <code>IdentifierReference</code>가 아닌 단일 <code>IdentifierReference</code>가 될 수 있습니다.
자바스크립트 문법에서도 마찬가지입니다.</p>
<p>하지만... 누가 런타임에 의미를 가질 수 있다 생각할까요?</p>
<p><a href="https://github.com/estree/estree/issues/194" target="_blank" rel="noopener noreferrer">이 estree issue</a>에 따르면 다음과 같은 내용이 있습니다.</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">fn</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">&gt;</span><span class="token plain"> fn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"fn"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">fn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">&gt;</span><span class="token plain"> fn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">''</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이에 최종적으로 acorn과 babel은 호환성을 위해서 <code>preserveParens</code> 옵션을 추가했습니다.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="function-declaration-in-if-statementif문에서-함수-선언">Function Declaration in If Statement(if문에서 함수 선언)<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#function-declaration-in-if-statementif%EB%AC%B8%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p><code>#sec-ecmascript-language-statements-and-declarations</code> 문법을 정확히 따르면 다음과 같습니다:</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Statement[Yield, Await, Return] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ... lots of statements</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Declaration[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ... declarations</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>AST 위해 정의한 <code>Statement</code> 노드에 당연히 <code>Declaration</code>는 포함되지 않습니다,</p>
<p>하지만 Annex B의 <code>#sec-functiondeclarations-in-ifstatement-statement-clauses</code>,
에서는 비엄격 모드의 <code>if</code> 구문 내에 함수 선언 가능합니다 :</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="label-statement-is-legit라벨-구문은-합법">Label statement is legit(라벨 구문은 합법)<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#label-statement-is-legit%EB%9D%BC%EB%B2%A8-%EA%B5%AC%EB%AC%B8%EC%9D%80-%ED%95%A9%EB%B2%95" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>라벨문을 한 줄도 작성해 본 적 없을 수 있지만, 최신 자바스크립트에서는 합법적이면서 엄격 모드에서 금지되지도 않습니다.</p>
<p>다음 구문은 올바른 구문으로 (객체 리터럴이 아닌) 라벨이 지정된 문을 반환합니다.</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token operator">&lt;</span><span class="token maybe-class-name">Foo</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  bar</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">baz</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"quaz"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">//   ^^^^^^^^^^^ `LabelledStatement`</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="let-키워드가-아닙니다"><code>let</code> 키워드가 아닙니다<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#let-%ED%82%A4%EC%9B%8C%EB%93%9C%EA%B0%80-%EC%95%84%EB%8B%99%EB%8B%88%EB%8B%A4" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p><code>let</code> 키워드가 아니므로 문법에 명시적으로 <code>let</code>이 특정 위치에 허용되지 않는다 명시되어 있지 않는 한 어디든 사용할 수 있습니다.
파서는 <code>let</code> 토큰 뒤에 오는 토큰을 들여다보고 파싱이 필요한 토큰을 결정해야 합니다. 예시:</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">instanceof</span><span class="token plain"> </span><span class="token class-name">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">a </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="for-in--for-of-및-in-context">For-in / For-of 및 [In] context<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#for-in--for-of-%EB%B0%8F-in-context" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p><code>#prod-ForInOfStatement</code>에서 <code>for-in</code>와 <code>for-of</code> 문법을 살펴보면,
파싱하는 방법에 대해 혼란스러워 질 것 입니다.</p>
<p>우리가 이해해야 할 두 가지 주요 장애물이 있습니다: <code>[lookahead ≠ let]</code>와 <code>[+In]</code>.</p>
<p>만약 우리가 <code>for (let</code>, 으로 파싱했다면 토큰이 무엇인지 확인해야 합니다:</p>
<ul>
<li><code>in</code> 아닌 <code>for (let in)</code>을 허용하지 않습니다.</li>
<li><code>{</code>, <code>[</code> 또는 <code>for (let {} = foo)</code>, <code>for (let [] = foo)</code> 및 <code>for (let bar = foo)</code>를 허용하는 식별자입니다.</li>
</ul>
<p><code>of</code> 혹은 <code>in</code> 키워드에 도달하면 오른쪽 표현식을 올바른 [+In] 컨텍스트로 전달할 필요가 있음.
<code>#prod-RelationalExpression</code>의 두 표현 <code>in</code>:</p>
<div class="codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-text codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">RelationalExpression[In, Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [+In] RelationalExpression[+In, ?Yield, ?Await] in ShiftExpression[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Note 2: The [In] grammar parameter is needed to avoid confusing the in operator in a relational expression with the in operator in a for statement.</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>그리고 이것은 전체 사양에서 <code>[In]</code> 컨텍스트에 대한 유일한 적용입니다.</p>
<p>또한 주목할 점은 문법 <code>[lookahead ∉ { let, async of }]</code>은 <code>for (async of ...)</code> 금지하다는 점입니다,
그래서 명시적인 카드할 필요가 있습니다.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="block-level-function-declarations">Block-Level Function Declarations<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#block-level-function-declarations" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>Annex B.3.2 에 <code>#sec-block-level-function-declarations-web-legacy-compatibility-semantics</code>,
<code>FunctionDeclaration</code>가 <code>Block</code> 구문에서 어떻게 동작하는가 설명하기 위해 페이지 전체에 할애되어 있습니다.
요약하면</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token plain">github</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">com</span><span class="token operator">/</span><span class="token plain">acornjs</span><span class="token operator">/</span><span class="token plain">acorn</span><span class="token operator">/</span><span class="token plain">blob</span><span class="token operator">/</span><span class="token plain">11735729c4ebe590e406f952059813f250a4cbd1</span><span class="token operator">/</span><span class="token plain">acorn</span><span class="token operator">/</span><span class="token plain">src</span><span class="token operator">/</span><span class="token plain">scope</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">js</span><span class="token plain">#</span><span class="token constant" style="color:rgb(189, 147, 249)">L30</span><span class="token operator">-</span><span class="token constant" style="color:rgb(189, 147, 249)">L35</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>함수 선언 안에 있는 경우 <code>FunctionDeclaration</code>의 이름은 <code>var</code> 선언과 동일하게 취급해야 합니다.
이 코드 조각은 <code>bar</code>가 블록 범위 안에 있기 때문에 재선언 오류를 발생시킵니다:</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// redeclaration error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>한편 다음은 함수 범위 안에 있기 때문에 에러가 발생하지 않으며, 함수 <code>bar</code>는 var 선언으로 처리됩니다:</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="grammar-context">Grammar Context<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#grammar-context" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>구문 문법에는 특정 구문을 허용하고 허용하지 않는 5개의 컨텍스트 매개변수가 있습니다,
즉, <code>[In]</code>, <code>[Return]</code>, <code>[Yield]</code>, <code>[Await]</code> 및 <code>[Default]</code>입니다.</p>
<p>예를 들어 Rome에서는 구문 분석 중에 컨텍스트를 유지하는 것이 가장 좋습니다:</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">https</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token plain">github</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">com</span><span class="token operator">/</span><span class="token plain">rome</span><span class="token operator">/</span><span class="token plain">tools</span><span class="token operator">/</span><span class="token plain">blob</span><span class="token operator">/</span><span class="token plain">5a059c0413baf1d54436ac0c149a829f0dfd1f4d</span><span class="token operator">/</span><span class="token plain">crates</span><span class="token operator">/</span><span class="token plain">rome_js_parser</span><span class="token operator">/</span><span class="token plain">src</span><span class="token operator">/</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">rs#</span><span class="token constant" style="color:rgb(189, 147, 249)">L404</span><span class="token operator">-</span><span class="token constant" style="color:rgb(189, 147, 249)">L425</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>그리고 문법에 따라 이러한 플래그를 적절히 전환하고 확인합니다.</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="assignmentpattern-vs-bindingpattern">AssignmentPattern vs BindingPattern<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#assignmentpattern-vs-bindingpattern" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p><code>estree</code>에서 <code>AssignmentExpression</code>의 왼쪽은 <code>Pattern</code>입니다:</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">extend interface AssignmentExpression {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    left: Pattern;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>그리고 <code>VariableDeclarator</code>는 <code>Pattern</code> 입니다:</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">interface VariableDeclarator &lt;: Node {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    type: "VariableDeclarator";</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    id: Pattern;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    init: Expression | null;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>Pattern</code>은 <code>Identifier</code>, <code>ObjectPattern</code>, <code>ArrayPattern</code> 일 수 있습니다:</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">interface Identifier &lt;: Expression, Pattern {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    type: "Identifier";</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    name: string;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">interface ObjectPattern &lt;: Pattern {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    type: "ObjectPattern";</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    properties: [ AssignmentProperty ];</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">interface ArrayPattern &lt;: Pattern {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    type: "ArrayPattern";</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    elements: [ Pattern | null ];</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>하지만 사양 관점에서 보면 다음과 같은 자바스크립트가 있습니다:</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// AssignmentExpression:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> foo </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">IdentifierReference</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> foo </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">IdentifierReference</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// VariableDeclarator</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> foo </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">BindingIdentifier</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> foo </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">BindingIdentifier</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This starts to become confusing because we now have a situation where we cannot directly distinguish whether the <code>Identifier</code> is a <code>BindingIdentifier</code> or a <code>IdentifierReference</code>
inside a <code>Pattern</code>:</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">enum</span><span class="token plain"> </span><span class="token type-definition class-name">Pattern</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">Identifier</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Is this a `BindingIdentifier` or a `IdentifierReference`?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">ArrayPattern</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">ObjectPattern</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이렇게 하면 구문 분석기 파이프라인에서 모든 종류의 불필요한 코드가 더 아래로 내려가게 됩니다.
예를 들어, 의미 분석을 위한 범위를 설정할 때, 이 '식별자'의 부모를 검사하여 이 <code>Identifier</code>를 범위에 바인딩할지 여부를 결정해야 합니다.
즉, 부모를 검사하여 범위에 바인딩할지 여부를 결정해야 합니다.</p>
<p>더 나은 해결책은 사양을 완전히 이해하고 수행할 작업을 결정하는 것입니다.</p>
<p><code>AssignmentExpression</code>과 <code>VariableDeclaration</code>의 문법은 다음과 같이 정의됩니다:</p>
<div class="language-marup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-marup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">13.15 Assignment Operators</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">AssignmentExpression[In, Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    LeftHandSideExpression[?Yield, ?Await] = AssignmentExpression[?In, ?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">13.15.5 Destructuring Assignment</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">In certain circumstances when processing an instance of the production</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">AssignmentExpression : LeftHandSideExpression = AssignmentExpression</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">the interpretation of LeftHandSideExpression is refined using the following grammar:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">AssignmentPattern[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ObjectAssignmentPattern[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ArrayAssignmentPattern[?Yield, ?Await]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">14.3.2 Variable Statement</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">VariableDeclaration[In, Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    BindingIdentifier[?Yield, ?Await] Initializer[?In, ?Yield, ?Await]opt</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    BindingPattern[?Yield, ?Await] Initializer[?In, ?Yield, ?Await]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>사양은 이 두 문법을 <code>AssignmentPattern</code>과 <code>BindingPattern</code>으로 별도로 정의하여 구분합니다.</p>
<p>따라서 이와 같은 상황에서는 <code>estree</code>에서 벗어나 구문 분석기를 위해 추가 AST 노드를 정의하는 것을 두려워하지 마세요:</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">enum</span><span class="token plain"> </span><span class="token type-definition class-name">BindingPattern</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">BindingIdentifier</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">ObjectBindingPattern</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">ArrayBindingPattern</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">enum</span><span class="token plain"> </span><span class="token type-definition class-name">AssignmentPattern</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">IdentifierReference</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">ObjectAssignmentPattern</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">ArrayAssignmentPattern</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>마침내 깨달음을 얻을 때까지 일주일 내내 매우 혼란스러운 상태였습니다:
하나의 <code>패턴</code> 노드 대신 <code>AssignmentPattern</code> 노드와 <code>BindingPattern</code> 노드를 정의해야 한다는 것을요.</p>
<ul>
<li><code>estree</code>가 옳음에 틀림이 없어. 몇 년이나 사용되었는데 틀릴리가 없지.</li>
<li>두 개의 개별 노드를 정의하지 않고 패턴 내부의 <code>Identifier</code>를 어떻게 깔끔하게 구분할 수 있을까?</li>
<li>하루 종일 사양을 본 후....
"13.15 Assignment Operators" <code>AssignmentPattern</code>의 문법은 "13.15 Assignment Operators"의 5번째 하우 ㅣ섹션에 "보충 구문"이라 부제로 적혀있습니다.🤯 - 모든 문법이 "런타임 의미론" 섹션 이후에 정의된 문법이 아니라 메인 섹션에 정의되어 있기에 이는 정말 옳지 않습니다</li>
</ul>
<hr>
<div class="theme-admonition theme-admonition-caution admonition_orRc alert alert--warning"><div class="admonitionHeading__xcM"><span class="admonitionIcon_s9h2"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>주의</div><div class="admonitionContent_SBYU"><p>다음과 같은 경우는 정말 이해하기 어렵습니다. 여기 용이 있죠.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="ambiguous-grammar">Ambiguous Grammar<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#ambiguous-grammar" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>먼저 파서처럼 생각하고 문제를 해결해 봅시다. <code>/</code> 토큰이 주어졌을 때 이것이 나눗셈 연산자인가, 아니면 정규식 표현식의 시작인가?</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">a </span><span class="token operator">/</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">a </span><span class="token operator">/</span><span class="token plain"> </span><span class="token regex regex-delimiter">/</span><span class="token regex regex-source language-regex"> regex </span><span class="token regex regex-delimiter">/</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">a </span><span class="token operator">/=</span><span class="token plain"> </span><span class="token regex regex-delimiter">/</span><span class="token regex regex-source language-regex"> regex </span><span class="token regex regex-delimiter">/</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">/</span><span class="token plain"> regex </span><span class="token operator">/</span><span class="token plain"> </span><span class="token operator">/</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">/=</span><span class="token operator">/</span><span class="token plain"> </span><span class="token operator">/</span><span class="token plain"> </span><span class="token regex regex-delimiter">/</span><span class="token regex regex-source language-regex">=</span><span class="token regex regex-delimiter">/</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>거의 불가능에 가깝지 않나요? 이를 세분화하여 문법을 따라가 봅시다.</p>
<p>가장 먼저 이해해야 할 것은 <code>#sec-ecmascript-language-lexical-grammar</code>에 명시된 대로 구문 문법이 어휘 문법을 주도한다는 것입니다.</p>
<blockquote>
<p>어휘 입력 요소의 식별이 입력 요소를 소비하는 구문 문법 컨텍스트에 민감한 몇 가지 상황이 있습니다.</p>
</blockquote>
<p>즉, 구문 분석기는 렉서에게 다음에 반환할 토큰을 알려줄 책임이 있습니다.
위의 예는 구문 분석기가 <code>/</code> 토큰 또는 <code>RegExp</code> 토큰 중 하나를 반환해야 함을 나타냅니다.
올바른 <code>/</code> 또는 <code>RegExp</code> 토큰을 얻기 위해 사양은 다음과 같이 말합니다.:</p>
<blockquote>
<p>InputElementRegExp 목표 기호는 정규 표현식 리터럴이 허용되는 모든 구문 문법 문맥에서 사용됩니다...
다른 모든 문맥에서는 InputElementDiv가 어휘 목표 기호로 사용됩니다.</p>
</blockquote>
<p><code>InputElementDiv</code>와 <code>InputElementRegExp</code> 구문은 다음과 같습니다.</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">InputElementDiv ::</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    WhiteSpace</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    LineTerminator</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Comment</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    CommonToken</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    DivPunctuator &lt;---------- the `/` and `/=` token</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    RightBracePunctuator</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">InputElementRegExp ::</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    WhiteSpace</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    LineTerminator</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Comment</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    CommonToken</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    RightBracePunctuator</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    RegularExpressionLiteral &lt;-------- the `RegExp` token</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>즉, 문법이 <code>RegularExpressionLiteral</code>에 도달할 때마다 <code>/</code>를 <code>RegExp</code> 토큰으로 토큰화해야 합니다(일치하는 <code>/</code>가 없는 경우 에러를 발생시킵니다).
다른 모든 경우에는 <code>/</code>를 슬래시 토큰으로 토큰화합니다.</p>
<p>예제를 살펴보겠습니다:</p>
<div class="codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-text codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">a / / regex /</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">^ ------------ PrimaryExpression:: IdentifierReference</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  ^ ---------- MultiplicativeExpression: MultiplicativeExpression MultiplicativeOperator ExponentiationExpression</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ^^^^^^^^ - PrimaryExpression: RegularExpressionLiteral</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이 구문은 <code>Statement</code>의 다른 시작 부분과 일치하지 않습니다,
따라서 <code>ExpressionStatement</code> 경로를 따릅니다:</p>
<p><code>ExpressionStatement</code> --&gt; <code>Expression</code> --&gt; <code>AssignmentExpression</code> --&gt; ... --&gt;
<code>MultiplicativeExpression</code> --&gt; ... --&gt;
<code>MemberExpression</code> --&gt; <code>PrimaryExpression</code> --&gt; <code>IdentifierReference</code>.</p>
<p>우리는 <code>RegularExpressionLiteral</code>이 아닌 <code>IdentifierReference</code>에서 멈췄습니다,
"다른 모든 컨텍스트에서 InputElementDiv는 어휘 목표 기호로 사용됩니다."라는 문장이 적용됩니다.
첫 번째 슬래시는 <code>DivPunctuator</code> 토큰입니다.</p>
<p>이것은 <code>DivPunctuator</code> 토큰이므로,
문법 <code>MultiplicativeExpression: MultiplicativeExpression MultiplicativeOperator ExponentiationExpression</code> 문법이 일치합니다,</p>
<p>이제 <code>a / /</code>의 두 번째 슬래시에 도달했습니다.
확장 표현식<code>을 따라가면, </code>PrimaryExpression: RegularExpressionLiteral<code>이 </code>/<code>와 일치하는 유일한 문법이기 때문에 </code>RegularExpressionLiteral`에 도달합니다:</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">RegularExpressionLiteral ::</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    / RegularExpressionBody / RegularExpressionFlags</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이 두 번째 <code>/</code>는 다음과 같은 이유로 <code>RegExp</code>로 토큰화됩니다.
사양에 "InputElementRegExp 목표 심볼은 RegularExpressionLiteral이 허용되는 모든 구문 문법 컨텍스트에서 사용됩니다." 라 명시되어 있기 때문입니다.</p>
<div class="theme-admonition theme-admonition-info admonition_orRc alert alert--info"><div class="admonitionHeading__xcM"><span class="admonitionIcon_s9h2"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>정보</div><div class="admonitionContent_SBYU"><p>연습 삼아 <code>/=/ / /=/</code> 문법을 따라 해보세요.</p></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="cover-grammar">Cover Grammar<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#cover-grammar" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>이 주제에 대한 <a href="https://v8.dev/blog/understanding-ecmascript-part-4" target="_blank" rel="noopener noreferrer">V8의 글</a>을 먼저 읽어보세요.</p>
<p>요약하자면, 사양에는 다음 세 가지 커버 문법이 명시되어 있습니다:</p>
<h4 class="anchor anchorWithStickyNavbar_otLt" id="coverparenthesizedexpressionandarrowparameterlist">CoverParenthesizedExpressionAndArrowParameterList<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#coverparenthesizedexpressionandarrowparameterlist" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h4>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">PrimaryExpression[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    CoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">When processing an instance of the production</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">PrimaryExpression[Yield, Await] : CoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    the interpretation of CoverParenthesizedExpressionAndArrowParameterList is refined using the following grammar:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ParenthesizedExpression[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ( Expression[+In, ?Yield, ?Await] )</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ArrowFunction[In, Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ArrowParameters[?Yield, ?Await] [no LineTerminator here] =&gt; ConciseBody[?In]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ArrowParameters[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    BindingIdentifier[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    CoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이러한 정의는 이하과 같습니다:</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> foo </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// SequenceExpression</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">bar</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">a</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> b</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ArrowExpression</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">CoverParenthesizedExpressionAndArrowParameterList</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이 문제를 해결하기 위한 간단하지만 번거로운 접근 방식은 먼저 <code>Vec&lt;Expression&gt;</code>으로 파싱하는 것입니다,
그런 다음 변환 함수를 작성하여 <code>ArrowParameters</code> 노드로 변환하는 것입니다. 즉, 각 개별 <code>Expression</code>을 <code>BindingPattern</code>으로 변환해야 합니다.</p>
<p>파서 내에서 스코프 트리를 작성하는 경우 주의해야 합니다,
즉, 파싱 중에 화살표 표현식에 대한 스코프를 생성합니다,
시퀀스 표현식에 대해서는 생성하지 않습니다,
이 작업을 수행하는 방법이 명확하지 않습니다. <a href="https://github.com/evanw/esbuild" target="_blank" rel="noopener noreferrer">esbuild</a>는 임시 스코프를 먼저 생성하여 이 문제를 해결했습니다,
임시 스코프를 생성한 다음 <code>ArrowExpression</code>이 아닌 경우 삭제하는 방식으로 이 문제를 해결했습니다.</p>
<p>이는 <a href="https://github.com/evanw/esbuild/blob/master/docs/architecture.md#symbols-and-scopes" target="_blank" rel="noopener noreferrer">아키텍처 문서</a>에 명시되어 있습니다:</p>
<blockquote>
<p>파서가 범위를 밀고 선언을 구문 분석하는 도중에 선언이 선언이 아니라는 것을 발견하는 몇 군데를 제외하고는 대부분 매우 간단합니다. 이러한 문제는 TypeScript에서 함수가 본문 없이 포워드 선언된 경우, JavaScript에서 괄호로 묶인 표현식이 나중에 =&gt; 토큰에 도달할 때까지 화살표 함수인지 아닌지 모호한 경우 발생합니다. 이 문제는 두 번이 아닌 세 번을 수행하여 파싱을 완료한 후 범위 설정과 기호 선언을 시작하면 해결될 수 있지만, 여기서는 두 번으로 이 작업을 수행하려고 합니다. 따라서 나중에 가정이 틀린 것으로 판명될 경우 범위 트리를 수정하기 위해 popScope() 대신 popAndDiscardScope() 또는 popAndFlattenScope()를 호출합니다.</p>
</blockquote>
<hr>
<h4 class="anchor anchorWithStickyNavbar_otLt" id="covercallexpressionandasyncarrowhead">CoverCallExpressionAndAsyncArrowHead<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#covercallexpressionandasyncarrowhead" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h4>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">CallExpression :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    CoverCallExpressionAndAsyncArrowHead</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">When processing an instance of the production</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">CallExpression : CoverCallExpressionAndAsyncArrowHead</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">the interpretation of CoverCallExpressionAndAsyncArrowHead is refined using the following grammar:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">CallMemberExpression[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    MemberExpression[?Yield, ?Await] Arguments[?Yield, ?Await]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">AsyncArrowFunction[In, Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    CoverCallExpressionAndAsyncArrowHead[?Yield, ?Await] [no LineTerminator here] =&gt; AsyncConciseBody[?In]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">CoverCallExpressionAndAsyncArrowHead[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    MemberExpression[?Yield, ?Await] Arguments[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">When processing an instance of the production</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">AsyncArrowFunction : CoverCallExpressionAndAsyncArrowHead =&gt; AsyncConciseBody</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">the interpretation of CoverCallExpressionAndAsyncArrowHead is refined using the following grammar:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">AsyncArrowHead :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    async [no LineTerminator here] ArrowFormalParameters[~Yield, +Await]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이하와 같이 정의합니다:</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// CallExpression</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">a</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> b</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// AsyncArrowFunction</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">CoverCallExpressionAndAsyncArrowHead</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>async</code>가 키워드가 아니기 때문에 이상하게 보입니다. 첫 번째 <code>async</code>는 함수 이름입니다.</p>
<hr>
<h4 class="anchor anchorWithStickyNavbar_otLt" id="coverinitializedname">CoverInitializedName<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/grammar#coverinitializedname" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h4>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">13.2.5 Object Initializer</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ObjectLiteral[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">PropertyDefinition[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    CoverInitializedName[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Note 3: In certain contexts, ObjectLiteral is used as a cover grammar for a more restricted secondary grammar.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">The CoverInitializedName production is necessary to fully cover these secondary grammars. However, use of this production results in an early Syntax Error in normal contexts where an actual ObjectLiteral is expected.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">13.2.5.1 Static Semantics: Early Errors</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">In addition to describing an actual object initializer the ObjectLiteral productions are also used as a cover grammar for ObjectAssignmentPattern and may be recognized as part of a CoverParenthesizedExpressionAndArrowParameterList. When ObjectLiteral appears in a context where ObjectAssignmentPattern is required the following Early Error rules are not applied. In addition, they are not applied when initially parsing a CoverParenthesizedExpressionAndArrowParameterList or CoverCallExpressionAndAsyncArrowHead.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">PropertyDefinition : CoverInitializedName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    I* t is a Syntax Error if any source text is matched by this production.</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복��사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-makrup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-makrup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">13.15.1 Static Semantics: Early Errors</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">AssignmentExpression : LeftHandSideExpression = AssignmentExpression</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">If LeftHandSideExpression is an ObjectLiteral or an ArrayLiteral, the following Early Error rules are applied:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    * LeftHandSideExpression must cover an AssignmentPattern.</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이하와 같이 정의합니다:</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> prop </span><span class="token operator">=</span><span class="token plain"> value </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ObjectAssignmentPattern</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> prop </span><span class="token operator">=</span><span class="token plain"> value </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ObjectLiteral with SyntaxError</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>파서는 <code>ObjectLiteral</code>을 <code>CoverInitializedName</code>으로 파싱해야 합니다,
에 도달하지 않으면 구문 에러를 발생시켜야 하며, <code>ObjectAssignmentPattern</code>에 대해 <code>=</code>에 도달하지 않으면 구문 에러를 발생시켜야 합니다.</p>
<p>연습을 위해 다음 중 어떤 <code>=</code>가 구문 오류를 던져야 할까요?</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ECMAScript 사양서]]></title>
        <id>https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/ecma-spec</id>
        <link href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/ecma-spec"/>
        <updated>2023-11-12T16:10:41.000Z</updated>
        <summary type="html"><![CDATA[The ECMAScript® 2023 Language Specification는 자바스크립트에 대한 모든 것을 자세히 설명하므로 누구나 자바스크립트를 구현할 수 있습니다.]]></summary>
        <content type="html"><![CDATA[<p><a href="https://tc39.es/ecma262/" target="_blank" rel="noopener noreferrer">The ECMAScript® 2023 Language Specification</a>는 자바스크립트에 대한 모든 것을 자세히 설명하므로 누구나 자바스크립트를 구현할 수 있습니다.</p>
<p>구문 분석기를 위해 다음 챕터를 따라 공부해야 합니다
The following chapters need to be studied for our parser:</p>
<ul>
<li>Chapter 5: Notational Conventions(표기법 규칙)</li>
<li>Chapter 11: ECMAScript Language: Source Text(소스 텍스트)</li>
<li>Chapter 12: ECMAScript Language: Lexical Grammar(어휘 문법)</li>
<li>Chapter 13 - 16: Expressions, Statements, Functions, Classes, Scripts and Modules(표현식, 문법, 함수, 클래스, 스크립트와 모듈)</li>
<li>Annex B: Additional ECMAScript Features for Web Browsers(웹 브라우저를 위한 추가 ECMAScript 기능)</li>
<li>Annex C: The Strict Mode of ECMAScript(ECMAScript 엄격 모드)</li>
</ul>
<p>사양 내 탐색:</p>
<ul>
<li>클릭 가능한 모든 항목에는 링크가 있으며 URL에 앵커로 표기됩니다 예시 <code>#sec-identifiers</code></li>
<li>항목 위로 마우스를 올리면 툴팁이 표시되고, <code>참조</code>를 클릭하면 모든 참조가 표시됩니다.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="notational-conventions표기법-규칙">Notational Conventions(표기법 규칙)<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/ecma-spec#notational-conventions%ED%91%9C%EA%B8%B0%EB%B2%95-%EA%B7%9C%EC%B9%99" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p><a href="https://tc39.es/ecma262/#sec-grammar-notation" target="_blank" rel="noopener noreferrer">Chapter 5.1.5 Grammar Notation</a> 우리가 읽을 섹션입니다.</p>
<p>여기서 유이해야할 것은 이렇습니다:</p>
<h3 class="anchor anchorWithStickyNavbar_otLt" id="재귀">재귀<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/ecma-spec#%EC%9E%AC%EA%B7%80" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h3>
<p>이하는 문법에서 목록이 표기되는 방법입니다.</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ArgumentList :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  AssignmentExpression</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  ArgumentList , AssignmentExpression</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>뜻</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> b </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> c </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">^</span><span class="token plain">_____________</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">ArgumentList</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token operator">^</span><span class="token plain">__________</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">ArgumentList</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token maybe-class-name">AssignmentExpression</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token operator">^</span><span class="token plain">___</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">AssignmentExpression</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_otLt" id="옵션">옵션<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/ecma-spec#%EC%98%B5%EC%85%98" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h3>
<p>선택적 구문을 위한 <code>_opt_</code> 접미사</p>
<p>이하는 예시입니다.</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">VariableDeclaration :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  BindingIdentifier Initializer_opt</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>뜻</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> binding_identifier</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> binding_identifier </span><span class="token operator">=</span><span class="token plain"> </span><span class="token maybe-class-name">Initializer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                       ______________ </span><span class="token maybe-class-name">Initializer_opt</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_otLt" id="파라메터">파라메터<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/ecma-spec#%ED%8C%8C%EB%9D%BC%EB%A9%94%ED%84%B0" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h3>
<p><code>[Return]</code>과 <code>[In]</code> 파타메터 문법입니다..</p>
<p>이하는 예시입니다.</p>
<div class="language-markdup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markdup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ScriptBody :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    StatementList[~Yield, ~Await, ~Return]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>뜻
top-level yield, await와 reutrn 허용하지 않는 스크립트</p>
<div class="language-markdup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markdup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ModuleItem :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  ImportDeclaration</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  ExportDeclaration</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  StatementListItem[~Yield, +Await, ~Return]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>top-level await은 허용 됨.</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="소스-텍스트">소스 텍스트<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/ecma-spec#%EC%86%8C%EC%8A%A4-%ED%85%8D%EC%8A%A4%ED%8A%B8" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p><a href="https://tc39.es/ecma262/#sec-types-of-source-code" target="_blank" rel="noopener noreferrer">Chapter 11.2 Types of Source Code</a> 에서는 이런 설명이 있습니다.
스크립트 코드와 모듈 코드 사이에는 큰 차이가 있다. 그리고 오래된 자바스크립트 동작을 허용하지 않음으로 문법을 더욱 엄격히 만드는 <code>use strict</code>이 있다.</p>
<p><strong>Script Code</strong> 엄격하지 않으며, <code>use strict</code>를 파일 상단에 입력해야 엄격해집니다..
html 에서는 <code>&lt;script src="javascript.js"&gt;&lt;/script&gt;</code> 이렇게 작성합니다.</p>
<p><strong>Module Code</strong> 자동으로 엄격모드입니다.
html에서는 <code>&lt;script type="module" src="main.mjs"&gt;&lt;/script&gt;</code> 이렇게 작성합니다.</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="ecmascript-language-lexical-grammar어휘-문법">ECMAScript Language: Lexical Grammar(어휘 문법)<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/ecma-spec#ecmascript-language-lexical-grammar%EC%96%B4%ED%9C%98-%EB%AC%B8%EB%B2%95" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>상세한 사양은 V8 블로그 <a href="https://v8.dev/blog/understanding-ecmascript-part-3" target="_blank" rel="noopener noreferrer">Understanding the ECMAScript spec</a> 참조해주세요.</p>
<h3 class="anchor anchorWithStickyNavbar_otLt" id="automatic-semicolon-insertion"><a href="https://tc39.es/ecma262/#sec-automatic-semicolon-insertion" target="_blank" rel="noopener noreferrer">Automatic Semicolon Insertion</a><a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/ecma-spec#automatic-semicolon-insertion" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h3>
<p>이 섹션에서는 자바스크립트 작성할 때 세미콜론을 생략할 수 있는 모든 규칙에 대해 설명합니다.
모든 설명은 이하와 같이 요약됩니다.</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">asi</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">mut</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">eat</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">Kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">Semicolon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">||</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">can_insert_semicolon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> range </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">prev_node_end</span><span class="token punctuation" style="color:rgb(248, 248, 242)">..</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">cur_token</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">start</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">Err</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">SyntaxError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">AutoSemicolonInsertion</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">into</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">can_insert_semicolon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">bool</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">cur_token</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">is_on_new_line </span><span class="token operator">||</span><span class="token plain"> </span><span class="token macro property">matches!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">cur_kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token class-name">Kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">RCurly</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token class-name">Kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">Eof</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>문법 끝이라면 <code>asi</code> 함수를 수동으로 호출해야 합니다:</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">parse_debugger_statement</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">mut</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Statement</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol" style="color:rgb(248, 248, 242)">'a</span><span class="token operator">&gt;&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> node </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">start_node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">expect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">Kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">Debugger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">asi</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ast</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">debugger_statement</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">finish_node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="코드 복사하기" title="복사" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-info admonition_orRc alert alert--info"><div class="admonitionHeading__xcM"><span class="admonitionIcon_s9h2"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>정보</div><div class="admonitionContent_SBYU"><p>asi 섹션은 파서를 염두해 작성되었습니다.
소스 텍스트가 왼쪽에서 오른쪽으로 구문 분석된다 명시되어 있으며, 따라서 다른 방식으로 파서를 작성하지 않습니다.
jsparagus는 이에 대해 <a href="https://github.com/mozilla-spidermonkey/jsparagus/blob/master/js-quirks.md#automatic-semicolon-insertion-" target="_blank" rel="noopener noreferrer">언급</a>했습니다.</p><blockquote>
<p>이 기능에 대한 사양은 매우 매우 높은 레벨이면서 괴상하게도 절차적입니다("소스 텍스트가 왼쪽에서 오른쪽으로 구문 분석될 때 토큰이 발생하면...", 마치 브라우저 사양에 대한 이야기로 들립니다. 제가 아는 한 구문 분석의 내부 구현 세부 사항에 대해 가정하거나 암시하는 것은 이 부분이 유일합니다.) 하지만 다른 방식으로 asi를 지정하는 것은 어려울 것입니다.</p>
</blockquote></div></div>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="expressions-statements-functions-classes-scripts-and-modules표현식-문법-함수-클래스-스크립트와-모듈">Expressions, Statements, Functions, Classes, Scripts and Modules(표현식, 문법, 함수, 클래스, 스크립트와 모듈)<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/ecma-spec#expressions-statements-functions-classes-scripts-and-modules%ED%91%9C%ED%98%84%EC%8B%9D-%EB%AC%B8%EB%B2%95-%ED%95%A8%EC%88%98-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-%EB%AA%A8%EB%93%88" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>구문 문법을 이해한 다음 구문 분석기를 작성하는 데 적용하려면 시간이 필요합니다.
보다 심층적 내용은 More in-depth content can be found in <a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/blog/grammar">문법 튜토리얼</a>에서 확인해주세요.</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="annex-b">Annex B<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/ecma-spec#annex-b" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[파서 적합 시험]]></title>
        <id>https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/conformance</id>
        <link href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/conformance"/>
        <updated>2023-11-12T16:10:41.000Z</updated>
        <summary type="html"><![CDATA[이 글에서는 JavaScript 혹은 TypeScript 문법에 파서 테스트를 하기 위한 3개의 GitHub 레포지토리에 대해 상세히 설명합니다.]]></summary>
        <content type="html"><![CDATA[<p>이 글에서는 JavaScript 혹은 TypeScript 문법에 파서 테스트를 하기 위한 3개의 GitHub 레포지토리에 대해 상세히 설명합니다.</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="test262">Test262<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/conformance#test262" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>JavaScript에는, Test262라 하는 <a href="https://github.com/tc39/test262" target="_blank" rel="noopener noreferrer">ECMAScript 테스트 스위트</a>가 있습니다.
Test262 목표는, 사양 지정된 모든 측정 가능한 동작을 커버하는 테스트 스위트를 제공하는 것입니다.</p>
<p>실제 적합성 테스트를 실시함에 따라, 여기에 있는 <a href="https://github.com/tc39/test262/blob/main/INTERPRETING.md#negative" target="_blank" rel="noopener noreferrer">parse 단계에서 테스트</a>를 확인하는 것이 좋습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="babel">Babel<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/conformance#babel" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>JavaScript에 새로운 언어 기능이 추가되면, Babel 에서도 이를 해석할 필요가 있습니다.
이에, Babel에는 독자적<a href="https://github.com/babel/babel/tree/main/packages/babel-parser/test" target="_blank" rel="noopener noreferrer">파서 테스트</a>가 있습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="typescript">TypeScript<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/conformance#typescript" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>TypeScript 적합성 테스트는 <a href="https://github.com/microsoft/TypeScript/tree/main/tests/cases/conformance" target="_blank" rel="noopener noreferrer">이 곳</a>에서 확인할 수 있습니다.</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="test-runner">Test Runner<a href="https://oxc-project.github.io/javascript-parser-in-rust/ko/blog/conformance#test-runner" class="hash-link" aria-label="관련 링크" title="관련 링크">​</a></h2>
<p>Rome는 상기한 테스트 스위트 용으로 테스트 러너를 구현해두었으며, <a href="https://github.com/rome/tools/tree/main/xtask/coverage" target="_blank" rel="noopener noreferrer">여기서</a>か 확인 가능합니다.</p>]]></content>
    </entry>
</feed>