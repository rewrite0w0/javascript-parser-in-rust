<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Write a JavaScript Parser in Rust Blog</title>
        <link>https://oxc-project.github.io/javascript-parser-in-rust/ja/blog</link>
        <description>Write a JavaScript Parser in Rust Blog</description>
        <lastBuildDate>Sun, 12 Nov 2023 16:10:41 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ja</language>
        <item>
            <title><![CDATA[Rome Tools]]></title>
            <link>https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/rome</link>
            <guid>https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/rome</guid>
            <pubDate>Sun, 12 Nov 2023 16:10:41 GMT</pubDate>
            <description><![CDATA[Rome は、JavaScript と TypeScript のパースに様々な技術を使用しています。このチュートリアルでは、それらを理解しやすい順序で要約しています。]]></description>
            <content:encoded><![CDATA[<p>Rome は、JavaScript と TypeScript のパースに様々な技術を使用しています。このチュートリアルでは、それらを理解しやすい順序で要約しています。</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="歴史">歴史<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/rome#%E6%AD%B4%E5%8F%B2" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<ul>
<li>Rome のコードベースは TypeScript から Rust に書き直されました。詳細は <a href="https://rome.tools/blog/2021/09/21/rome-will-be-rewritten-in-rust" target="_blank" rel="noopener noreferrer">Rome will be rewritten in Rust</a> をご覧ください。</li>
<li>この決定は、<a href="https://github.com/rslint/rslint" target="_blank" rel="noopener noreferrer">rslint</a> と <a href="https://github.com/rust-lang/rust-analyzer" target="_blank" rel="noopener noreferrer">rust-analyzer</a> の作者との話し合いの結果行われました。</li>
<li>rust-analyzer は、IDE のようなツールを具象構文木をベースに構築できることを証明しました。</li>
<li>rslint は、rust-analyzer で使用されているライブラリを用いて、 Rust で JavaScript のパーサーを実装できることを証明しました。</li>
<li>Rome は、作者の許可を得て rslint のコードベースを自分たちのリポジトリに移植しました。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="具象構文木-cst">具象構文木 (CST)<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/rome#%E5%85%B7%E8%B1%A1%E6%A7%8B%E6%96%87%E6%9C%A8-cst" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<ul>
<li>ベースライブラリは <a href="https://github.com/rust-analyzer/rowan" target="_blank" rel="noopener noreferrer">rowan</a> と呼ばれており、詳細は <a href="https://github.com/rust-lang/rust-analyzer/blob/master/docs/dev/syntax.md" target="_blank" rel="noopener noreferrer">overview of rowan</a> をご覧ください。</li>
<li>Rowan (red-green trees としても知られている) は、赤いベリーを実らせる <a href="https://en.wikipedia.org/wiki/Rowan" target="_blank" rel="noopener noreferrer">Rowan</a> という木にちなんで名付けられました。</li>
<li>red-green trees の由来は、C# の作者による<a href="https://ericlippert.com/2012/06/08/red-green-trees/" target="_blank" rel="noopener noreferrer">ブログ記事</a>で説明されています。</li>
<li>Rowan は、ソースコードのすべてを記述する損失のない CST を定義し、構文木の親、子、兄弟ノードなどを走査する一連の API を提供します。</li>
<li>AST よりも CST を利用する利点については、<a href="https://rdambrosio016.github.io/rust/2020/09/18/pure-ast-based-linting-sucks.html" target="_blank" rel="noopener noreferrer">Pure AST based linting sucks</a> をご覧ください。</li>
<li>CST は完全に回復可能なパーサーを構築する手段を提供します。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="文法">文法<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/rome#%E6%96%87%E6%B3%95" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<ul>
<li>AST と同様に文法を定義する必要があります。文法は、<a href="https://github.com/rome/tools/tree/main/xtask/codegen" target="_blank" rel="noopener noreferrer">xtask/codegen</a> を使用して自動生成されます。</li>
<li>文法は <a href="https://github.com/rust-analyzer/ungrammar" target="_blank" rel="noopener noreferrer">ungrammar</a> という DSL から生成されます。</li>
<li>入力の <code>ungrammar</code> の ソースファイルは、<a href="https://github.com/rome/tools/blob/main/xtask/codegen/js.ungram" target="_blank" rel="noopener noreferrer">xtask/codegen/js.ungram</a> にあります。</li>
<li>生成されるコードは、 <a href="https://github.com/rome/tools/tree/main/crates/rome_js_syntax/src/generated" target="_blank" rel="noopener noreferrer">rome_js_syntax/src/generated</a> にあります。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="エントリーポイント">エントリーポイント<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/rome#%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AA%E3%83%BC%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>Rome のコードベースは大きくなり、パーサーのエントリーポイントを見つけるのが少し難しくなっています。</p>
<p>初めての方のために、コードを実行するためのバイナリのエントリーポイントである <code>rome_cli</code> クレートを見てみましょう。</p>
<div class="language-bash codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-bash codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">cargo run -p rome_cli</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">touch test.js</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cargo run -p rome_cli -- check ./test.js</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>rome_cli</code> は最終的に <code>rome_js_parser::parse</code> を呼び出します。</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">https</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token plain">github</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">com</span><span class="token operator">/</span><span class="token plain">rome</span><span class="token operator">/</span><span class="token plain">tools</span><span class="token operator">/</span><span class="token plain">blob</span><span class="token operator">/</span><span class="token plain">9815467c66688773bc1bb6ef9a5b2d86ca7b3682</span><span class="token operator">/</span><span class="token plain">crates</span><span class="token operator">/</span><span class="token plain">rome_js_parser</span><span class="token operator">/</span><span class="token plain">src</span><span class="token operator">/</span><span class="token plain">parse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">rs#</span><span class="token constant" style="color:rgb(189, 147, 249)">L178</span><span class="token operator">-</span><span class="token constant" style="color:rgb(189, 147, 249)">L187</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>実際のパーサーのコードはこちらのように始まります。</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">https</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token plain">github</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">com</span><span class="token operator">/</span><span class="token plain">rome</span><span class="token operator">/</span><span class="token plain">tools</span><span class="token operator">/</span><span class="token plain">blob</span><span class="token operator">/</span><span class="token plain">9815467c66688773bc1bb6ef9a5b2d86ca7b3682</span><span class="token operator">/</span><span class="token plain">crates</span><span class="token operator">/</span><span class="token plain">rome_js_parser</span><span class="token operator">/</span><span class="token plain">src</span><span class="token operator">/</span><span class="token plain">syntax</span><span class="token operator">/</span><span class="token plain">program</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">rs#</span><span class="token constant" style="color:rgb(189, 147, 249)">L14</span><span class="token operator">-</span><span class="token constant" style="color:rgb(189, 147, 249)">L17</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="コントリビューション">コントリビューション<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/rome#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AA%E3%83%93%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<ul>
<li><a href="https://github.com/rome/tools/blob/main/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">CONTRIBUTING.md</a> には、コントリビューションの方法の説明があります。</li>
<li><a href="https://rome.github.io/tools/rome_js_parser/index.html" target="_blank" rel="noopener noreferrer">rome_js_parser crate doc</a> には、パーサーに関する実装の説明があります。</li>
<li>パーサーのテストについては、<a href="https://github.com/rome/tools/tree/main/xtask/codegen#cargo-codegen-test" target="_blank" rel="noopener noreferrer"><code>cargo codegen test</code></a> をご確認ください。</li>
<li>適合テストについては、 <a href="https://github.com/rome/tools/tree/main/xtask/coverage" target="_blank" rel="noopener noreferrer"><code>cargo coverage</code></a> をご覧ください。</li>
<li>分からないことがあれば、<a href="https://discord.com/invite/rome" target="_blank" rel="noopener noreferrer">Discord サーバー</a> で自由に質問できます。</li>
</ul>
<div class="theme-admonition theme-admonition-info admonition_orRc alert alert--info"><div class="admonitionHeading__xcM"><span class="admonitionIcon_s9h2"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>備考</div><div class="admonitionContent_SBYU"><p>JavaScript / TypeScript パーサーは 99% 完成しています。コントリビューションの最善の方法は、独自のコードベースで Rome をテストするか、Github の問題を確認することです。</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[文法]]></title>
            <link>https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar</link>
            <guid>https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar</guid>
            <pubDate>Sun, 12 Nov 2023 16:10:41 GMT</pubDate>
            <description><![CDATA[JavaScript の文法は解析が非常に困難なものの一つであり、]]></description>
            <content:encoded><![CDATA[<p>JavaScript の文法は解析が非常に困難なものの一つであり、
このチュートリアルでは私が学習中に経験した苦労と涙を詳細に説明します。</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="ll1文法">LL(1)文法<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#ll1%E6%96%87%E6%B3%95" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p><a href="https://en.wikipedia.org/wiki/LL_grammar" target="_blank" rel="noopener noreferrer">Wikipedia</a> によると、</p>
<blockquote>
<p>an LL grammar is a context-free grammar that can be parsed by an LL parser, which parses the input from Left to right</p>
</blockquote>
<p>最初の「L」はソースを左から右にスキャンすることを意味し、
2番目の「L」は左端導出木の構築を意味します。</p>
<p>文脈自由であり、LL(1) の「1」は次のトークンを覗き見るだけで木を構築できることを意味します。</p>
<p>LL 文法は、私たちが怠惰な人間であり、パーサを手動で書く必要がないように、プログラムを自動的に生成するプログラムを書きたいという理由で、学術界で特に興味を持たれています。</p>
<p>残念なことに、ほとんどの産業用プログラミング言語には素晴らしい LL(1) 文法はありません。
JavaScript もその例外ではありません。</p>
<div class="theme-admonition theme-admonition-info admonition_orRc alert alert--info"><div class="admonitionHeading__xcM"><span class="admonitionIcon_s9h2"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>備考</div><div class="admonitionContent_SBYU"><p>Mozillaは数年前に <a href="https://github.com/mozilla-spidermonkey/jsparagus" target="_blank" rel="noopener noreferrer">jsparagus</a> プロジェクトを開始し、
<a href="https://github.com/mozilla-spidermonkey/jsparagus/tree/master/jsparagus" target="_blank" rel="noopener noreferrer">Python で LALR パーサジェネレータ</a> を作成しました。
彼らは過去2年間ほとんど更新しておらず、<a href="https://github.com/mozilla-spidermonkey/jsparagus/blob/master/js-quirks.md" target="_blank" rel="noopener noreferrer">js-quirks.md</a> の最後に強いメッセージを送っています。</p><blockquote>
<p>What have we learned today?</p>
<ul>
<li>Do not write a JS parser.</li>
<li>JavaScript has some syntactic horrors in it. But hey, you don't make the world's most widely used programming language by avoiding all mistakes.</li>
</ul>
</blockquote></div></div>
<hr>
<p>JavaScript を解析する唯一の実用的な方法は、その文法の性質上、手動で再帰下降パーサを書くことです。
そのため、足を撃つ前に文法の特異性をすべて学びましょう。</p>
<p>以下のリストは簡単なものから理解が難しくなりますので、
コーヒーを飲んでゆっくりと時間をかけてください。</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="識別子">識別子<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#%E8%AD%98%E5%88%A5%E5%AD%90" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p><code>#sec-identifiers</code> で定義されている識別子には3つのタイプがあります。</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">IdentifierReference[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">BindingIdentifier[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">LabelIdentifier[Yield, Await] :</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>estree</code> および一部の AST では、上記の識別子を区別せず、仕様書ではそれらを平文で説明していません。</p>
<p><code>BindingIdentifier</code> は宣言であり、<code>IdentifierReference</code> はバインディング識別子への参照です。
例えば、<code>var foo = bar</code> の場合、<code>foo</code> は文法上の <code>BindingIdentifier</code> であり、<code>bar</code> は <code>IdentifierReference</code> です。</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">VariableDeclaration[In, Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    BindingIdentifier[?Yield, ?Await] Initializer[?In, ?Yield, ?Await] opt</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Initializer[In, Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    = AssignmentExpression[?In, ?Yield, ?Await]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>AssignmentExpression</code> を <code>PrimaryExpression</code> にたどると、</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">PrimaryExpression[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    IdentifierReference[?Yield, ?Await]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>ASTでこれらの識別子を異なる方法で宣言すると、特に意味解析のために、下流のツールを大幅に簡素化することができます。</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token type-definition class-name">BindingIdentifier</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Atom</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token type-definition class-name">IdentifierReference</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Atom</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="クラスと-strict-モード">クラスと Strict モード<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%A8-strict-%E3%83%A2%E3%83%BC%E3%83%89" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>ECMAScript のクラスは、Strict モードの後に生まれたため、クラス内のすべての要素はシンプルさのために Strict モードである必要があります。
<code>#sec-class-definitions</code> では、<code>Node: A class definition is always strict mode code.</code> と述べられています。</p>
<p>関数スコープと関連付けることで Strict モードを宣言することは簡単ですが、<code>class</code> 宣言にはスコープがないため、クラスの解析のために追加の状態を保持する必要があります。</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">https</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token plain">github</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">com</span><span class="token operator">/</span><span class="token plain">swc</span><span class="token operator">-</span><span class="token plain">project</span><span class="token operator">/</span><span class="token plain">swc</span><span class="token operator">/</span><span class="token plain">blob</span><span class="token operator">/</span><span class="token plain">f9c4eff94a133fa497778328fa0734aa22d5697c</span><span class="token operator">/</span><span class="token plain">crates</span><span class="token operator">/</span><span class="token plain">swc_ecma_parser</span><span class="token operator">/</span><span class="token plain">src</span><span class="token operator">/</span><span class="token plain">parser</span><span class="token operator">/</span><span class="token plain">class_and_fn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">rs#</span><span class="token constant" style="color:rgb(189, 147, 249)">L85</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="レガシーオクタルと-use-strict">レガシーオクタルと Use Strict<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#%E3%83%AC%E3%82%AC%E3%82%B7%E3%83%BC%E3%82%AA%E3%82%AF%E3%82%BF%E3%83%AB%E3%81%A8-use-strict" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p><code>#sec-string-literals-early-errors</code> では、文字列内のエスケープされたレガシーオクタル <code>"\01"</code> は許可されていません。</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">EscapeSequence ::</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    LegacyOctalEscapeSequence</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    NonOctalDecimalEscapeSequence</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">このプロダクションにマッチするソーステキストが Strict モードコードである場合、構文エラーです。</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>これを検出するのに最適な場所は、レキサーの内部です。レキサーはパーサーに Strict モードの状態を尋ね、それに応じてエラーをスローすることができます。</p>
<p>しかし、これはディレクティブと混在した場合には不可能になります。</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token plain">github</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">com</span><span class="token operator">/</span><span class="token plain">tc39</span><span class="token operator">/</span><span class="token plain">test262</span><span class="token operator">/</span><span class="token plain">blob</span><span class="token operator">/</span><span class="token plain">747bed2e8aaafe8fdf2c65e8a10dd7ae64f66c47</span><span class="token operator">/</span><span class="token plain">test</span><span class="token operator">/</span><span class="token plain">language</span><span class="token operator">/</span><span class="token plain">literals</span><span class="token operator">/</span><span class="token plain">string</span><span class="token operator">/</span><span class="token plain">legacy</span><span class="token operator">-</span><span class="token plain">octal</span><span class="token operator">-</span><span class="token plain">escape</span><span class="token operator">-</span><span class="token plain">sequence</span><span class="token operator">-</span><span class="token plain">prologue</span><span class="token operator">-</span><span class="token plain">strict</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">js</span><span class="token plain">#</span><span class="token constant" style="color:rgb(189, 147, 249)">L16</span><span class="token operator">-</span><span class="token constant" style="color:rgb(189, 147, 249)">L19</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>use strict</code> はエスケープされたレガシーオクタルの後に宣言されていますが、構文エラーがスローされる必要があります。
幸いなことに、実際のコードではディレクティブとレガシーオクタルを組み合わせることはありません...上記の test262 のケースをパスしたい場合を除いては。</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="非単純パラメータと-strict-モード">非単純パラメータと Strict モード<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#%E9%9D%9E%E5%8D%98%E7%B4%94%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%81%A8-strict-%E3%83%A2%E3%83%BC%E3%83%89" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>非Strictモードでは、同じ関数パラメータを許可します <code>function foo(a, a) { }</code>、そして <code>use strict</code> を追加することでこれを禁止することができます：<code>function foo(a, a) { "use strict" }</code>。
その後のes6では、関数パラメータに他の文法が追加されました。例えば <code>function foo({ a }, b = c) {}</code>。</p>
<p>では、次のようなコードを書いた場合、"01" は Strict モードのエラーとなるのでしょうか？</p>
<div class="language-javaScript language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">value</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"\01"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"use strict"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>具体的には、パーサーの観点からパラメータ内に Strict モードの構文エラーがある場合、どうすべきでしょうか？
そのため、<code>#sec-function-definitions-static-semantics-early-errors</code> では、次のように述べてこれを禁止しています。</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">FunctionDeclaration :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">FunctionExpression :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">FunctionBodyがFunctionBodyContainsUseStrictでtrueであり、FormalParametersがIsSimpleParameterListでfalseである場合、構文エラーです。</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Chrome は、謎めいたメッセージ「Uncaught SyntaxError: Illegal 'use strict' directive in function with non-simple parameter list」というエラーをスローします。</p>
<p>詳細な説明は、ESLint の作者による <a href="https://humanwhocodes.com/blog/2016/10/the-ecmascript-2016-change-you-probably-dont-know/" target="_blank" rel="noopener noreferrer">このブログ記事</a> に記載されています。</p>
<div class="theme-admonition theme-admonition-info admonition_orRc alert alert--info"><div class="admonitionHeading__xcM"><span class="admonitionIcon_s9h2"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>備考</div><div class="admonitionContent_SBYU"><p>興味深い事実ですが、TypeScript で <code>es5</code> をターゲットにしている場合、上記のルールは適用されません。次のようにトランスパイルされます。</p><div class="language-javaScript language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">a</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"use strict"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">b </span><span class="token operator">===</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> b </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"\01"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="parenthesizedexpression">ParenthesizedExpression<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#parenthesizedexpression" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>ParenthesizedExpression (パレン式)には意味がないはずですか？
例えば、<code>((x))</code>のASTは、<code>ParenthesizedExpression</code> -&gt; <code>ParenthesizedExpression</code> -&gt; <code>IdentifierReference</code> ではなく、単一の <code>IdentifierReference</code> であることができます。
そして、これは JavaScript の文法の場合です。</p>
<p>しかし...誰が実行時の意味を持つことができると思ったでしょうか。
<a href="https://github.com/estree/estree/issues/194" target="_blank" rel="noopener noreferrer">この estree の問題</a>で見つかったように、</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">fn</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">&gt;</span><span class="token plain"> fn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"fn"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">fn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">&gt;</span><span class="token plain"> fn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">''</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>結局のところ、acorn と babel は互換性のために <code>preserveParens</code> オプションを追加しました。</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="if文内の関数宣言">if文内の関数宣言<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#if%E6%96%87%E5%86%85%E3%81%AE%E9%96%A2%E6%95%B0%E5%AE%A3%E8%A8%80" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p><code>#sec-ecmascript-language-statements-and-declarations</code> の文法に厳密に従うと、</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Statement[Yield, Await, Return] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ...たくさんの文</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Declaration[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ...宣言</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>私たちのASTのために定義した <code>Statement</code> ノードには明らかに <code>Declaration</code> は含まれていませんが、</p>
<p>しかし、Annex B <code>#sec-functiondeclarations-in-ifstatement-statement-clauses</code> では、非厳密モードの <code>if</code> 文の文の位置に宣言を許可しています。</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="ラベル文は正当です">ラベル文は正当です<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#%E3%83%A9%E3%83%99%E3%83%AB%E6%96%87%E3%81%AF%E6%AD%A3%E5%BD%93%E3%81%A7%E3%81%99" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>おそらく私たちは一行もラベル付き文を書いたことがないでしょうが、それは現代の JavaScript では正当であり、厳密モードでは禁止されていません。</p>
<p>次の構文は正しいですが、オブジェクトリテラルではなく、ラベル付き文を返します。</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token operator">&lt;</span><span class="token maybe-class-name">Foo</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  bar</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">baz</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"quaz"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">//   ^^^^^^^^^^^ `LabelledStatement`</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="let-はキーワードではありません"><code>let</code> はキーワードではありません<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#let-%E3%81%AF%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E3%81%A7%E3%81%AF%E3%81%82%E3%82%8A%E3%81%BE%E3%81%9B%E3%82%93" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p><code>let</code> はキーワードではないため、文法が明示的にそのような位置に <code>let</code> が許可されていないと述べている限り、どこにでも現れることが許されています。
パーサーは <code>let</code> トークンの次のトークンを覗き見て、それをどのように解析するかを決定する必要があります。例えば：</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">instanceof</span><span class="token plain"> </span><span class="token class-name">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">a </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="for-in--for-of-と-in-コンテキスト">For-in / For-of と [In] コンテキスト<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#for-in--for-of-%E3%81%A8-in-%E3%82%B3%E3%83%B3%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p><code>#prod-ForInOfStatement</code> の <code>for-in</code> および <code>for-of</code> の文法を見ると、これらを解析する方法がすぐにわかりにくくなります。</p>
<p>私たちが理解するための2つの主な障害があります：<code>[lookahead ≠ let]</code> の部分と <code>[+In]</code> の部分です。</p>
<p><code>for (let</code> まで解析した場合、次のトークンを確認する必要があります：</p>
<ul>
<li><code>in</code> ではないこと（<code>for (let in</code> を許可しないため）</li>
<li><code>{</code>、<code>[</code>、または識別子であること（<code>for (let {} = foo)</code>、<code>for (let [] = foo)</code>、<code>for (let bar = foo)</code> を許可するため）</li>
</ul>
<p><code>of</code> または <code>in</code> キーワードに到達したら、右辺の式は正しい[+In]コンテキストで渡す必要があります。これにより、<code>#prod-RelationalExpression</code> の2つの <code>in</code> 式が許可されなくなります。</p>
<div class="codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-text codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">RelationalExpression[In, Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [+In] RelationalExpression[+In, ?Yield, ?Await] in ShiftExpression[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Note 2: [In ]文法パラメータは、関係式内のin演算子とfor文内のin演算子を混同しないために必要です。</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>これは仕様全体での [In] コンテキストの唯一の適用です。</p>
<p>また、文法 <code>[lookahead ∉ { let, async of }]</code> は <code>for (async of ...)</code> を禁止しており、明示的に防止する必要があります。</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="ブロックレベルの関数宣言">ブロックレベルの関数宣言<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%83%AC%E3%83%99%E3%83%AB%E3%81%AE%E9%96%A2%E6%95%B0%E5%AE%A3%E8%A8%80" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>Annex B.3.2 <code>#sec-block-level-function-declarations-web-legacy-compatibility-semantics</code> では、<code>FunctionDeclaration</code> が <code>Block</code> 文でどのように動作するかを説明するために1ページが割かれています。
要点は次のとおりです。</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token plain">github</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">com</span><span class="token operator">/</span><span class="token plain">acornjs</span><span class="token operator">/</span><span class="token plain">acorn</span><span class="token operator">/</span><span class="token plain">blob</span><span class="token operator">/</span><span class="token plain">11735729c4ebe590e406f952059813f250a4cbd1</span><span class="token operator">/</span><span class="token plain">acorn</span><span class="token operator">/</span><span class="token plain">src</span><span class="token operator">/</span><span class="token plain">scope</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">js</span><span class="token plain">#</span><span class="token constant" style="color:rgb(189, 147, 249)">L30</span><span class="token operator">-</span><span class="token constant" style="color:rgb(189, 147, 249)">L35</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>FunctionDeclaration</code> の名前は、関数宣言内にある場合には <code>var</code> 宣言と同じように扱われる必要があります。
次のコードスニペットは、<code>bar</code> がブロックスコープ内にあるため、再宣言エラーが発生します。</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 再宣言エラー</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>一方、次のコードはエラーになりません。関数 <code>bar</code> は関数スコープ内にあるため、var 宣言として扱われます。</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="文法コンテキスト">文法コンテキスト<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#%E6%96%87%E6%B3%95%E3%82%B3%E3%83%B3%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>構文的な文法には、特定の構造を許可または禁止するための 5 つのコンテキストパラメータがあります。
具体的には、<code>[In]</code>、<code>[Return]</code>、<code>[Yield]</code>、<code>[Await]</code>、<code>[Default]</code> です。</p>
<p>解析中にコンテキストを保持することが最善です。例えば、Romeでは次のようになります。</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">https</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token plain">github</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">com</span><span class="token operator">/</span><span class="token plain">rome</span><span class="token operator">/</span><span class="token plain">tools</span><span class="token operator">/</span><span class="token plain">blob</span><span class="token operator">/</span><span class="token plain">5a059c0413baf1d54436ac0c149a829f0dfd1f4d</span><span class="token operator">/</span><span class="token plain">crates</span><span class="token operator">/</span><span class="token plain">rome_js_parser</span><span class="token operator">/</span><span class="token plain">src</span><span class="token operator">/</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">rs#</span><span class="token constant" style="color:rgb(189, 147, 249)">L404</span><span class="token operator">-</span><span class="token constant" style="color:rgb(189, 147, 249)">L425</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>そして、文法に従ってこれらのフラグを切り替えて確認することが重要です。</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="assignmentpattern-と-bindingpattern">AssignmentPattern と BindingPattern<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#assignmentpattern-%E3%81%A8-bindingpattern" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p><code>estree</code> では、<code>AssignmentExpression</code> の左辺は <code>Pattern</code> です。</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">extend interface AssignmentExpression {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    left: Pattern;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>そして、<code>VariableDeclarator</code> の左辺も <code>Pattern</code> です。</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">interface VariableDeclarator &lt;: Node {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    type: "VariableDeclarator";</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    id: Pattern;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    init: Expression | null;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>Pattern</code> は <code>Identifier</code>、<code>ObjectPattern</code>、<code>ArrayPattern</code> のいずれかです。</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">interface Identifier &lt;: Expression, Pattern {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    type: "Identifier";</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    name: string;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">interface ObjectPattern &lt;: Pattern {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    type: "ObjectPattern";</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    properties: [ AssignmentProperty ];</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">interface ArrayPattern &lt;: Pattern {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    type: "ArrayPattern";</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    elements: [ Pattern | null ];</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>しかし、仕様の観点からは、次のような JavaScript があります。</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// AssignmentExpression:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> foo </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">IdentifierReference</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> foo </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">IdentifierReference</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// VariableDeclarator</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> foo </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">BindingIdentifier</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> foo </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">BindingIdentifier</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>これは混乱を招くようになります。なぜなら、<code>Identifier</code> が <code>BindingIdentifier</code> なのか <code>IdentifierReference</code> なのかを直接区別することができなくなるからです。</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">enum</span><span class="token plain"> </span><span class="token type-definition class-name">Pattern</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">Identifier</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// これは`BindingIdentifier`なのか`IdentifierReference`なのか？</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">ArrayPattern</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">ObjectPattern</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピ��ー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>これにより、パーサーパイプラインのさらなる不要なコードが発生します。たとえば、意味解析のスコープを設定する際に、この <code>Identifier</code> をスコープにバインドするかどうかを判断するために、この <code>Identifier</code> の親を調べる必要があります。</p>
<p>より良い解決策は、仕様を完全に理解し、何をするかを決定することです。</p>
<p><code>AssignmentExpression</code> と <code>VariableDeclaration</code> の文法は次のように定義されています。</p>
<div class="language-marup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-marup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">13.15 Assignment Operators</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">AssignmentExpression[In, Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    LeftHandSideExpression[?Yield, ?Await] = AssignmentExpression[?In, ?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">13.15.5 Destructuring Assignment</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">In certain circumstances when processing an instance of the production</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">AssignmentExpression : LeftHandSideExpression = AssignmentExpression</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">the interpretation of LeftHandSideExpression is refined using the following grammar:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">AssignmentPattern[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ObjectAssignmentPattern[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ArrayAssignmentPattern[?Yield, ?Await]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">14.3.2 Variable Statement</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">VariableDeclaration[In, Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    BindingIdentifier[?Yield, ?Await] Initializer[?In, ?Yield, ?Await]opt</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    BindingPattern[?Yield, ?Await] Initializer[?In, ?Yield, ?Await]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>仕様では、これらの文法を <code>AssignmentPattern</code> と <code>BindingPattern</code> として別々に定義して区別しています。</p>
<p>そのため、このような状況では、<code>estree</code> から逸脱して、パーサーのために追加のASTノードを定義することを恐れないでください。</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">enum</span><span class="token plain"> </span><span class="token type-definition class-name">BindingPattern</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">BindingIdentifier</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">ObjectBindingPattern</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">ArrayBindingPattern</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">enum</span><span class="token plain"> </span><span class="token type-definition class-name">AssignmentPattern</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">IdentifierReference</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">ObjectAssignmentPattern</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">ArrayAssignmentPattern</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>私は1週間もの間、非常に混乱していましたが、ついに悟りに達しました。単一の <code>Pattern</code> ノードではなく、<code>AssignmentPattern</code> ノードと <code>BindingPattern</code> ノードを定義する必要があります。</p>
<ul>
<li><code>estree</code> は正しいはずです。何年も使われているので間違っているはずがありませんよね？</li>
<li>パターン内の <code>Identifier</code> をきれいに区別する方法はありますか？文法はどこにあるのか見つけられません。</li>
<li>1日中仕様を調べても、<code>AssignmentPattern</code> の文法はメインセクションの5番目のサブセクションにあり、サブタイトルが「Supplemental Syntax」であることがわかりました。これは本当に場違いです。すべての文法はメインセクションで定義されているのに、この文法だけが「Runtime Semantics」セクションの後に定義されています。</li>
</ul>
<hr>
<div class="theme-admonition theme-admonition-caution admonition_orRc alert alert--warning"><div class="admonitionHeading__xcM"><span class="admonitionIcon_s9h2"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>注意</div><div class="admonitionContent_SBYU"><p>以下のケースは非常に理解が難しいです。注意が必要です。</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="曖昧な文法">曖昧な文法<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#%E6%9B%96%E6%98%A7%E3%81%AA%E6%96%87%E6%B3%95" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>まず、パーサーのように考えて問題を解決しましょう - <code>/</code> トークンが除算演算子なのか正規表現式の開始なのかを判断します。</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">a </span><span class="token operator">/</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">a </span><span class="token operator">/</span><span class="token plain"> </span><span class="token regex regex-delimiter">/</span><span class="token regex regex-source language-regex"> regex </span><span class="token regex regex-delimiter">/</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">a </span><span class="token operator">/=</span><span class="token plain"> </span><span class="token regex regex-delimiter">/</span><span class="token regex regex-source language-regex"> regex </span><span class="token regex regex-delimiter">/</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">/</span><span class="token plain"> regex </span><span class="token operator">/</span><span class="token plain"> </span><span class="token operator">/</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">/=</span><span class="token operator">/</span><span class="token plain"> </span><span class="token operator">/</span><span class="token plain"> </span><span class="token regex regex-delimiter">/</span><span class="token regex regex-source language-regex">=</span><span class="token regex regex-delimiter">/</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>これはほとんど不可能ですね。これらを分解して文法に従ってみましょう。</p>
<p>まず理解する必要があるのは、構文的文法が字句的文法を駆動するということです。<code>#sec-ecmascript-language-lexical-grammar</code> で述べられています。</p>
<blockquote>
<p>There are several situations where the identification of lexical input elements is sensitive to the syntactic grammar context that is consuming the input elements.</p>
</blockquote>
<p>これは、パーサーが次に返すトークンを字句解析器に指示する責任があることを意味します。
上記の例では、字句解析器が <code>/</code> トークンまたは <code>RegExp</code> トークンのいずれかを返す必要があります。
正しい <code>/</code> または <code>RegExp</code> トークンを取得するために、仕様は次のように述べています。</p>
<blockquote>
<p>The InputElementRegExp goal symbol is used in all syntactic grammar contexts where a RegularExpressionLiteral is permitted ... In all other contexts, InputElementDiv is used as the lexical goal symbol.</p>
</blockquote>
<p>そして、<code>InputElementDiv</code> と <code>InputElementRegExp</code> の構文は次のようになります。</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">InputElementDiv ::</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    WhiteSpace</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    LineTerminator</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Comment</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    CommonToken</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    DivPunctuator &lt;---------- `/`および`/=`トークン</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    RightBracePunctuator</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">InputElementRegExp ::</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    WhiteSpace</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    LineTerminator</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Comment</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    CommonToken</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    RightBracePunctuator</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    RegularExpressionLiteral &lt;-------- `RegExp`トークン</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>これは、文法が <code>RegularExpressionLiteral</code> に到達するたびに、<code>/</code> を <code>RegExp</code> トークンとしてトークン化する必要があることを意味します（一致する <code>/</code> がない場合はエラーをスローします）。
それ以外の場合は、<code>/</code> をスラッシュトークンとしてトークン化します。</p>
<p>例を見てみましょう：</p>
<div class="codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-text codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">a / / regex /</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">^ ------------ PrimaryExpression:: IdentifierReference</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  ^ ---------- MultiplicativeExpression: MultiplicativeExpression MultiplicativeOperator ExponentiationExpression</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ^^^^^^^^ - PrimaryExpression: RegularExpressionLiteral</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>この文は <code>Statement</code> の他の開始と一致しないため、<code>ExpressionStatement</code> のルートに進みます。</p>
<p><code>ExpressionStatement</code> --&gt; <code>Expression</code> --&gt; <code>AssignmentExpression</code> --&gt; ... --&gt;
<code>MultiplicativeExpression</code> --&gt; ... --&gt;
<code>MemberExpression</code> --&gt; <code>PrimaryExpression</code> --&gt; <code>IdentifierReference</code>。</p>
<p><code>IdentifierReference</code> で止まり、<code>RegularExpressionLiteral</code> ではなく、文「それ以外のすべてのコンテキストでは、InputElementDivが字句ゴール記号として使用されます」が適用されます。
最初のスラッシュは <code>DivPunctuator</code> トークンです。</p>
<p>これが <code>DivPunctuator</code> トークンであるため、文法 <code>MultiplicativeExpression: MultiplicativeExpression MultiplicativeOperator ExponentiationExpression</code> が一致し、右辺は <code>ExponentiationExpression</code> であることが期待されます。</p>
<p>今度は <code>a / /</code> の2番目のスラッシュにいます。
<code>ExponentiationExpression</code> に従っていくと、<code>RegularExpressionLiteral</code> に到達します。なぜなら、<code>RegularExpressionLiteral</code> が <code>/</code> と一致する唯一の文法だからです。</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">RegularExpressionLiteral ::</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    / RegularExpressionBody / RegularExpressionFlags</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>この2番目の <code>/</code> は <code>RegExp</code> としてトークン化されます。なぜなら、仕様が「RegularExpressionLiteral が許可されるすべての構文的文法コンテキストで InputElementRegExp ゴール記号が使用される」と述べているからです。</p>
<div class="theme-admonition theme-admonition-info admonition_orRc alert alert--info"><div class="admonitionHeading__xcM"><span class="admonitionIcon_s9h2"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>備考</div><div class="admonitionContent_SBYU"><p>練習として、<code>/=/ / /=/</code> の文法に従ってみてください。</p></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="cover-grammar">Cover Grammar<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#cover-grammar" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>まず、このトピックに関する <a href="https://v8.dev/blog/understanding-ecmascript-part-4" target="_blank" rel="noopener noreferrer">V8のブログ記事</a> を読んでください。</p>
<p>要約すると、仕様は次の3つの Cover Grammar を述べています：</p>
<h4 class="anchor anchorWithStickyNavbar_otLt" id="coverparenthesizedexpressionandarrowparameterlist">CoverParenthesizedExpressionAndArrowParameterList<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#coverparenthesizedexpressionandarrowparameterlist" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h4>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">PrimaryExpression[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    CoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">PrimaryExpression[Yield, Await] : CoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await] のインスタンスを処理する際、CoverParenthesizedExpressionAndArrowParameterList の解釈は以下の文法を使用して洗練されます:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ParenthesizedExpression[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ( Expression[+In, ?Yield, ?Await] )</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ArrowFunction[In, Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ArrowParameters[?Yield, ?Await] [ここには LineTerminator がない] =&gt; ConciseBody[?In]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ArrowParameters[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    BindingIdentifier[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    CoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコ�ードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>これらの定義は以下を定義します:</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> foo </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// SequenceExpression</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">bar</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">a</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> b</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ArrowExpression</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">CoverParenthesizedExpressionAndArrowParameterList</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>この問題を解決するための単純で手間のかかるアプローチは、まず <code>Vec&lt;Expression&gt;</code> として解析し、
それを <code>ArrowParameters</code> ノードに変換する変換関数を書くことです。つまり、各個別の <code>Expression</code> を <code>BindingPattern</code> に変換する必要があります。</p>
<p>なお、もしパーサー内でスコープツリーを構築している場合、
つまり、パーサー内でアロー式のスコープを作成しているが、
シーケンス式のスコープは作成していない場合、
これをどのように行うかは明らかではありません。<a href="https://github.com/evanw/esbuild" target="_blank" rel="noopener noreferrer">esbuild</a> は、一時的なスコープを作成し、
それが <code>ArrowExpression</code> でない場合には削除することで、この問題を解決しています。</p>
<p>これは、その <a href="https://github.com/evanw/esbuild/blob/master/docs/architecture.md#symbols-and-scopes" target="_blank" rel="noopener noreferrer">アーキテクチャドキュメント</a> に記載されています:</p>
<blockquote>
<p>This is mostly pretty straightforward except for a few places where the parser has pushed a scope and is in the middle of parsing a declaration only to discover that it's not a declaration after all. This happens in TypeScript when a function is forward-declared without a body, and in JavaScript when it's ambiguous whether a parenthesized expression is an arrow function or not until we reach the =&gt; token afterwards. This would be solved by doing three passes instead of two so we finish parsing before starting to set up scopes and declare symbols, but we're trying to do this in just two passes. So instead we call popAndDiscardScope() or popAndFlattenScope() instead of popScope() to modify the scope tree later if our assumptions turn out to be incorrect.</p>
</blockquote>
<hr>
<h4 class="anchor anchorWithStickyNavbar_otLt" id="covercallexpressionandasyncarrowhead">CoverCallExpressionAndAsyncArrowHead<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#covercallexpressionandasyncarrowhead" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h4>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">CallExpression :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    CoverCallExpressionAndAsyncArrowHead</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">CallExpression : CoverCallExpressionAndAsyncArrowHead のインスタンスを処理する際、CoverCallExpressionAndAsyncArrowHead の解釈は以下の文法を使用して洗練されます:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">CallMemberExpression[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    MemberExpression[?Yield, ?Await] Arguments[?Yield, ?Await]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">AsyncArrowFunction[In, Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    CoverCallExpressionAndAsyncArrowHead[?Yield, ?Await] [ここには改行文字がない] =&gt; AsyncConciseBody[?In]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">CoverCallExpressionAndAsyncArrowHead[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    MemberExpression[?Yield, ?Await] Arguments[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">AsyncArrowFunction : CoverCallExpressionAndAsyncArrowHead =&gt; AsyncConciseBody のインスタンスを処理する際、CoverCallExpressionAndAsyncArrowHead の解釈は以下の文法を使用して洗練されます:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">AsyncArrowHead :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    async [ここには改行文字がない] ArrowFormalParameters[~Yield, +Await]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>これらの定義は次のように定義されます:</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// CallExpression</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">a</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> b</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// AsyncArrowFunction</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">CoverCallExpressionAndAsyncArrowHead</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>これは奇妙に見えるかもしれませんが、<code>async</code> はキーワードではありません。最初の <code>async</code> は関数名です。</p>
<hr>
<h4 class="anchor anchorWithStickyNavbar_otLt" id="coverinitializedname">CoverInitializedName<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/grammar#coverinitializedname" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h4>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">13.2.5 Object Initializer</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ObjectLiteral[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">PropertyDefinition[Yield, Await] :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    CoverInitializedName[?Yield, ?Await]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Note 3: In certain contexts, ObjectLiteral is used as a cover grammar for a more restricted secondary grammar.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">The CoverInitializedName production is necessary to fully cover these secondary grammars. However, use of this production results in an early Syntax Error in normal contexts where an actual ObjectLiteral is expected.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">13.2.5.1 Static Semantics: Early Errors</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">In addition to describing an actual object initializer the ObjectLiteral productions are also used as a cover grammar for ObjectAssignmentPattern and may be recognized as part of a CoverParenthesizedExpressionAndArrowParameterList. When ObjectLiteral appears in a context where ObjectAssignmentPattern is required the following Early Error rules are not applied. In addition, they are not applied when initially parsing a CoverParenthesizedExpressionAndArrowParameterList or CoverCallExpressionAndAsyncArrowHead.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">PropertyDefinition : CoverInitializedName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    I* t is a Syntax Error if any source text is matched by this production.</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コ��ピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-makrup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-makrup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">13.15.1 Static Semantics: Early Errors</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">AssignmentExpression : LeftHandSideExpression = AssignmentExpression</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">If LeftHandSideExpression is an ObjectLiteral or an ArrayLiteral, the following Early Error rules are applied:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    * LeftHandSideExpression must cover an AssignmentPattern.</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>これらの定義は次のように定義されます:</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> prop </span><span class="token operator">=</span><span class="token plain"> value </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ObjectAssignmentPattern</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> prop </span><span class="token operator">=</span><span class="token plain"> value </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// SyntaxErrorを伴うObjectLiteral</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>パーサーは <code>CoverInitializedName</code> を持つ <code>ObjectLiteral</code> を解析し、<code>ObjectAssignmentPattern</code> のための <code>=</code> に到達しない場合は構文エラーをスローする必要があります。</p>
<p>練習として、次の <code>=</code> のうちどれが構文エラーをスローするでしょうか？</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ECMAScript の仕様]]></title>
            <link>https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/ecma-spec</link>
            <guid>https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/ecma-spec</guid>
            <pubDate>Sun, 12 Nov 2023 16:10:41 GMT</pubDate>
            <description><![CDATA[ECMAScript® 2023言語仕様書 は、JavaScript についてのすべての詳細を記載しており、誰でも独自の JavaScript エンジンを実装することができます。]]></description>
            <content:encoded><![CDATA[<p><a href="https://tc39.es/ecma262/" target="_blank" rel="noopener noreferrer">ECMAScript® 2023言語仕様書</a> は、JavaScript についてのすべての詳細を記載しており、誰でも独自の JavaScript エンジンを実装することができます。</p>
<p>以下の章を私たちのパーサーのために学習する必要があります：</p>
<ul>
<li>第5章：表記規則</li>
<li>第11章：ECMAScript 言語：ソーステキスト</li>
<li>第12章：ECMAScript 言語：字句文法</li>
<li>第13章〜第16章：式、文、関数、クラス、スクリプト、モジュール</li>
<li>付録B：Web ブラウザ向けの追加 ECMAScript 機能</li>
<li>付録C：ECMAScript の厳密モード</li>
</ul>
<p>仕様書内のナビゲーションのために：</p>
<ul>
<li>クリック可能なものには永続的なリンクがあり、URL にアンカーとして表示されます。例：<code>#sec-identifiers</code></li>
<li>ホバーするとツールチップが表示され、<code>References</code> をクリックするとその参照が表示されます</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="表記規則">表記規則<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/ecma-spec#%E8%A1%A8%E8%A8%98%E8%A6%8F%E5%89%87" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p><a href="https://tc39.es/ecma262/#sec-grammar-notation" target="_blank" rel="noopener noreferrer">第5.1.5節 文法表記</a> を読む必要があります。</p>
<p>ここで注意するべき点は次のとおりです：</p>
<h3 class="anchor anchorWithStickyNavbar_otLt" id="再帰">再帰<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/ecma-spec#%E5%86%8D%E5%B8%B0" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h3>
<p>これは文法でリストが表示される方法です。</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ArgumentList :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  AssignmentExpression</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  ArgumentList , AssignmentExpression</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>という意味です</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> b </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> c </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">^</span><span class="token plain">_____________</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">ArgumentList</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token operator">^</span><span class="token plain">__________</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">ArgumentList</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token maybe-class-name">AssignmentExpression</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token operator">^</span><span class="token plain">___</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">AssignmentExpression</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_otLt" id="オプション">オプション<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/ecma-spec#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h3>
<p>オプションの構文には <code>_opt_</code> 接尾辞が付きます。例えば、</p>
<div class="language-markup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">VariableDeclaration :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  BindingIdentifier Initializer_opt</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>という意味です</p>
<div class="language-javascript codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-javascript codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> binding_identifier</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> binding_identifier </span><span class="token operator">=</span><span class="token plain"> </span><span class="token maybe-class-name">Initializer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                       ______________ </span><span class="token maybe-class-name">Initializer_opt</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_otLt" id="パラメータ">パラメータ<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/ecma-spec#%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h3>
<p><code>[Return]</code> と <code>[In]</code> は文法のパラメータです。</p>
<p>例えば</p>
<div class="language-markdup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markdup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ScriptBody :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    StatementList[~Yield, ~Await, ~Return]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>という意味です。トップレベルの yield、await、return はスクリプトでは許可されていませんが、</p>
<div class="language-markdup codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-markdup codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ModuleItem :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  ImportDeclaration</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  ExportDeclaration</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  StatementListItem[~Yield, +Await, ~Return]</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>ではトップレベルの await が許可されています。</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="ソーステキスト">ソーステキスト<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/ecma-spec#%E3%82%BD%E3%83%BC%E3%82%B9%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p><a href="https://tc39.es/ecma262/#sec-types-of-source-code" target="_blank" rel="noopener noreferrer">第11.2節 ソースコードの種類</a> では、スクリプトコードとモジュールコードの間には大きな違いがあることが述べられています。
また、古い JavaScript の振る舞いを禁止するための <code>use strict</code> モードがあります。</p>
<p><strong>スクリプトコード</strong> は厳密ではありません。スクリプトコードを厳密にするためには、ファイルの先頭に <code>use strict</code> を挿入する必要があります。
HTMLでは <code>&lt;script src="javascript.js"&gt;&lt;/script&gt;</code> と書きます。</p>
<p><strong>モジュールコード</strong> は自動的に厳密です。
HTMLでは <code>&lt;script type="module" src="main.mjs"&gt;&lt;/script&gt;</code> と書きます。</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="ecmascript言語字句文法">ECMAScript言語：字句文法<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/ecma-spec#ecmascript%E8%A8%80%E8%AA%9E%E5%AD%97%E5%8F%A5%E6%96%87%E6%B3%95" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>より詳細な説明については、V8 ブログの <a href="https://v8.dev/blog/understanding-ecmascript-part-3" target="_blank" rel="noopener noreferrer">ECMAScript仕様の理解</a> を読んでください。</p>
<h3 class="anchor anchorWithStickyNavbar_otLt" id="自動セミコロン挿入"><a href="https://tc39.es/ecma262/#sec-automatic-semicolon-insertion" target="_blank" rel="noopener noreferrer">自動セミコロン挿入</a><a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/ecma-spec#%E8%87%AA%E5%8B%95%E3%82%BB%E3%83%9F%E3%82%B3%E3%83%AD%E3%83%B3%E6%8C%BF%E5%85%A5" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h3>
<p>このセクションでは、JavaScript を書く際にセミコロンを省略できるルールについて説明しています。
すべての説明は次のように要約されます</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">asi</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">mut</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">eat</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">Kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">Semicolon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">||</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">can_insert_semicolon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> range </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">prev_node_end</span><span class="token punctuation" style="color:rgb(248, 248, 242)">..</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">cur_token</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">start</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">Err</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">SyntaxError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">AutoSemicolonInsertion</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">into</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">can_insert_semicolon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">bool</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">cur_token</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">is_on_new_line </span><span class="token operator">||</span><span class="token plain"> </span><span class="token macro property">matches!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">cur_kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token class-name">Kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">RCurly</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token class-name">Kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">Eof</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>asi</code> 関数は適用可能な場所で手動で呼び出す必要があります。例えば、文の最後で呼び出されます。</p>
<div class="language-rust codeBlockContainer_hgho theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_i5iK"><pre tabindex="0" class="prism-code language-rust codeBlock_ekRx thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_K0EZ"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">parse_debugger_statement</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">mut</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Statement</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol" style="color:rgb(248, 248, 242)">'a</span><span class="token operator">&gt;&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> node </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">start_node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">expect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">Kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">Debugger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">asi</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ast</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">debugger_statement</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">finish_node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_cEF_"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_MNe3" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_Yt9D"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DNDH"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-info admonition_orRc alert alert--info"><div class="admonitionHeading__xcM"><span class="admonitionIcon_s9h2"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>備考</div><div class="admonitionContent_SBYU"><p>この asi のセクションはパーサーを想定して書かれており、ソーステキストは左から右に解析されることが明示的に述べられています。これにより、他の方法でパーサーを書くことはほとんど不可能になります。jsparagus の作者は <a href="https://github.com/mozilla-spidermonkey/jsparagus/blob/master/js-quirks.md#automatic-semicolon-insertion-" target="_blank" rel="noopener noreferrer">ここ</a> でこれについての愚痴を述べています。</p><blockquote>
<p>この機能の仕様は非常に高レベルであり、奇妙な手続き的なものです（「ソーステキストが左から右に解析されるときに、トークンが遭遇されると...」というように、仕様がブラウザについてのストーリーを語っているかのようです。私の知る限り、これは解析の内部実装の詳細について何かが前提されたり暗示されたりする仕様の唯一の場所です。）しかし、asi を他の方法で指定するのは難しいでしょう。</p>
</blockquote></div></div>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="式文関数クラススクリプトモジュール">式、文、関数、クラス、スクリプト、モジュール<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/ecma-spec#%E5%BC%8F%E6%96%87%E9%96%A2%E6%95%B0%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>構文的な文法を理解し、それをパーサーの作成に適用するには時間がかかります。
より詳細な内容は、<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/blog/grammar">文法チュートリアル</a> で見つけることができます。</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="付録b">付録B<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/ecma-spec#%E4%BB%98%E9%8C%B2b" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[パーサーの適合試験]]></title>
            <link>https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/conformance</link>
            <guid>https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/conformance</guid>
            <pubDate>Sun, 12 Nov 2023 16:10:41 GMT</pubDate>
            <description><![CDATA[この記事では、JavaScript および TypeScript の文法に対するパーサーのテストを行うための 3 つの GitHub リポジトリについて詳しく説明します。]]></description>
            <content:encoded><![CDATA[<p>この記事では、JavaScript および TypeScript の文法に対するパーサーのテストを行うための 3 つの GitHub リポジトリについて詳しく説明します。</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="test262">Test262<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/conformance#test262" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>JavaScript には、Test262 と呼ばれる <a href="https://github.com/tc39/test262" target="_blank" rel="noopener noreferrer">ECMAScript のテストスイート</a>があります。
Test262 の目標は、仕様で指定されたすべての観測可能な動作をカバーするテストスイートを提供することです。</p>
<p>実際に適合性のテストを実施するにあたっては、こちらの<a href="https://github.com/tc39/test262/blob/main/INTERPRETING.md#negative" target="_blank" rel="noopener noreferrer">パースフェーズのテスト</a>を確認するのが良いでしょう。</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="babel">Babel<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/conformance#babel" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>JavaScript に新しい言語機能が追加されると、Babel でもそれらを解析する必要があります。
したがって、Babel には独自の<a href="https://github.com/babel/babel/tree/main/packages/babel-parser/test" target="_blank" rel="noopener noreferrer">パーサーテスト</a>があります。</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="typescript">TypeScript<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/conformance#typescript" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>TypeScript における適合性テストは<a href="https://github.com/microsoft/TypeScript/tree/main/tests/cases/conformance" target="_blank" rel="noopener noreferrer">こちら</a>で見つけることができます。</p>
<h2 class="anchor anchorWithStickyNavbar_otLt" id="test-runner">Test Runner<a href="https://oxc-project.github.io/javascript-parser-in-rust/ja/blog/conformance#test-runner" class="hash-link" aria-label="この見出しへのリンク" title="この見出しへのリンク">​</a></h2>
<p>Rome は上記のテストスイート用にテストランナーを実装しており、<a href="https://github.com/rome/tools/tree/main/xtask/coverage" target="_blank" rel="noopener noreferrer">こちら</a>から確認することができます。</p>]]></content:encoded>
        </item>
    </channel>
</rss>