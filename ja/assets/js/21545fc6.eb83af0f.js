"use strict";(self.webpackChunkjavascript_parser_in_rust=self.webpackChunkjavascript_parser_in_rust||[]).push([[303],{2875:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var t=r(1527),i=r(7660);const s={id:"typescript",title:"TypeScript"},a=void 0,o={id:"typescript",title:"TypeScript",description:"JavaScript \u3092\u7d42\u3048\u3066\u3001TypeScript \u306e\u89e3\u6790\u306b\u6311\u6226\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u304b\uff1f",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/typescript.md",sourceDirName:".",slug:"/typescript",permalink:"/javascript-parser-in-rust/ja/docs/typescript",draft:!1,unlisted:!1,editUrl:"https://github.com/oxc-project/javascript-parser-in-rust/tree/main/docs/typescript.md",tags:[],version:"current",frontMatter:{id:"typescript",title:"TypeScript"},sidebar:"tutorialSidebar",previous:{title:"\u610f\u5473\u89e3\u6790",permalink:"/javascript-parser-in-rust/ja/docs/semantics_analysis"},next:{title:"\u53c2\u8003\u6587\u732e",permalink:"/javascript-parser-in-rust/ja/docs/references"}},c={},d=[{value:"JSX vs TSX",id:"jsx-vs-tsx",level:2},{value:"\u5148\u8aad\u307f",id:"\u5148\u8aad\u307f",level:2},{value:"TSIndexSignature",id:"tsindexsignature",level:3},{value:"Arrow Expressions",id:"arrow-expressions",level:3}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["JavaScript \u3092\u7d42\u3048\u3066\u3001TypeScript \u306e\u89e3\u6790\u306b\u6311\u6226\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u304b\uff1f\n\u60aa\u3044\u30cb\u30e5\u30fc\u30b9\u306f\u3001\u4ed5\u69d8\u304c\u5b58\u5728\u3057\u306a\u3044\u3053\u3068\u3067\u3059\u304c\u3001\u826f\u3044\u30cb\u30e5\u30fc\u30b9\u306f\u3001TypeScript \u306e\u30d1\u30fc\u30b5\u30fc\u304c",(0,t.jsx)(n.a,{href:"https://github.com/microsoft/TypeScript/blob/main/src/compiler/parser.ts",children:" \u5358\u4e00\u306e\u30d5\u30a1\u30a4\u30eb"})," \u306b\u3042\u308b\u3053\u3068\u3067\u3059 \ud83d\ude43\u3002"]}),"\n",(0,t.jsx)(n.h2,{id:"jsx-vs-tsx",children:"JSX vs TSX"}),"\n",(0,t.jsx)(n.p,{children:"\u6b21\u306e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u3001"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"let foo = <string> bar;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\u3053\u308c\u304c ",(0,t.jsx)(n.code,{children:"tsx"})," \u306e\u5834\u5408\u306f\u69cb\u6587\u30a8\u30e9\u30fc\u3067\u3059\uff08Unterminated JSX\uff09\u304c\u3001",(0,t.jsx)(n.code,{children:"VariableDeclaration"})," \u3068 ",(0,t.jsx)(n.code,{children:"TSTypeAssertion"})," \u306e\u6b63\u3057\u3044\u3082\u306e\u3067\u3059\u3002"]}),"\n",(0,t.jsx)(n.h2,{id:"\u5148\u8aad\u307f",children:"\u5148\u8aad\u307f"}),"\n",(0,t.jsx)(n.p,{children:"\u7279\u5b9a\u306e\u5834\u6240\u3067\u306f\u3001\u30d1\u30fc\u30b5\u30fc\u306f\u6b63\u3057\u3044\u6587\u6cd5\u3092\u5224\u65ad\u3059\u308b\u305f\u3081\u306b\u3001\u8907\u6570\u306e\u30c8\u30fc\u30af\u30f3\u3092\u5148\u8aad\u307f\u3057\u3066\u8997\u304d\u898b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002"}),"\n",(0,t.jsx)(n.h3,{id:"tsindexsignature",children:"TSIndexSignature"}),"\n",(0,t.jsxs)(n.p,{children:["\u305f\u3068\u3048\u3070\u3001",(0,t.jsx)(n.code,{children:"TSIndexSignature"})," \u3092\u89e3\u6790\u3059\u308b\u5834\u5408\u3001\u6b21\u306e2\u3064\u306e\u30b1\u30fc\u30b9\u3092\u8003\u616e\u3057\u3066\u304f\u3060\u3055\u3044\uff1a"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"type A = { readonly [a: number]: string }\n           ^__________________________^ TSIndexSignature\n\ntype B = { [a]: string }\n           ^_________^ TSPropertySignature\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\u6700\u521d\u306e ",(0,t.jsx)(n.code,{children:"{"})," \u306e ",(0,t.jsx)(n.code,{children:"type A"})," \u306e\u5834\u5408\u3001",(0,t.jsx)(n.code,{children:"readonly"}),"\u3001",(0,t.jsx)(n.code,{children:"["}),"\u3001",(0,t.jsx)(n.code,{children:"a"}),"\u3001",(0,t.jsx)(n.code,{children:":"}),"\u3001",(0,t.jsx)(n.code,{children:"number"})," \u306e5\u3064\u306e\u30c8\u30fc\u30af\u30f3\u3092\u5148\u8aad\u307f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u306b\u3088\u308a\u3001",(0,t.jsx)(n.code,{children:"TSIndexSignature"})," \u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3001",(0,t.jsx)(n.code,{children:"TSPropertySignature"})," \u3067\u306f\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002"]}),"\n",(0,t.jsx)(n.p,{children:"\u3053\u308c\u3092\u53ef\u80fd\u306b\u3057\u3001\u52b9\u7387\u7684\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u5b57\u53e5\u89e3\u6790\u5668\u306f\u8907\u6570\u306e\u30c8\u30fc\u30af\u30f3\u3092\u683c\u7d0d\u3059\u308b\u30d0\u30c3\u30d5\u30a1\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u3002"}),"\n",(0,t.jsx)(n.h3,{id:"arrow-expressions",children:"Arrow Expressions"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/blog/grammar#cover-grammar",children:"Cover Grammar"})," \u3067\u8b70\u8ad6\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001",(0,t.jsx)(n.code,{children:"=>"})," \u30c8\u30fc\u30af\u30f3\u304cSequenceExpression\u306e\u5f8c\u306b\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u3001",(0,t.jsx)(n.code,{children:"Expression"})," \u3092",(0,t.jsx)(n.code,{children:"BindingPattern"})," \u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002"]}),"\n",(0,t.jsxs)(n.p,{children:["\u3057\u304b\u3057\u3001\u3053\u308c\u306f TypeScript \u3067\u306f\u6a5f\u80fd\u3057\u307e\u305b\u3093\u3002",(0,t.jsx)(n.code,{children:"()"})," \u5185\u306e\u5404\u30a2\u30a4\u30c6\u30e0\u306b\u306f TypeScript \u306e\u69cb\u6587\u304c\u542b\u307e\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u3001\u5bfe\u5fdc\u3059\u308b\u30b1\u30fc\u30b9\u304c\u591a\u3059\u304e\u307e\u3059\u3002\u4f8b\u3048\u3070\uff1a"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"<x>a, b as c, d!;\n(a?: b = {} as c!) => {};\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u3053\u306e\u7279\u5b9a\u306e\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066\u306f\u3001TypeScript \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5b66\u3076\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\u95a2\u9023\u3059\u308b\u30b3\u30fc\u30c9\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function tryParseParenthesizedArrowFunctionExpression(\n  allowReturnTypeInArrowFunction: boolean,\n): Expression | undefined {\n  const triState = isParenthesizedArrowFunctionExpression();\n  if (triState === Tristate.False) {\n    // It's definitely not a parenthesized arrow function expression.\n    return undefined;\n  }\n\n  // If we definitely have an arrow function, then we can just parse one, not requiring a\n  // following => or { token. Otherwise, we *might* have an arrow function.  Try to parse\n  // it out, but don't allow any ambiguity, and return 'undefined' if this could be an\n  // expression instead.\n  return triState === Tristate.True\n    ? parseParenthesizedArrowFunctionExpression(\n        /*allowAmbiguity*/ true,\n        /*allowReturnTypeInArrowFunction*/ true,\n      )\n    : tryParse(() =>\n        parsePossibleParenthesizedArrowFunctionExpression(\n          allowReturnTypeInArrowFunction,\n        ),\n      );\n}\n\n//  True        -> We definitely expect a parenthesized arrow function here.\n//  False       -> There *cannot* be a parenthesized arrow function here.\n//  Unknown     -> There *might* be a parenthesized arrow function here.\n//                 Speculatively look ahead to be sure, and rollback if not.\nfunction isParenthesizedArrowFunctionExpression(): Tristate {\n  if (\n    token() === SyntaxKind.OpenParenToken ||\n    token() === SyntaxKind.LessThanToken ||\n    token() === SyntaxKind.AsyncKeyword\n  ) {\n    return lookAhead(isParenthesizedArrowFunctionExpressionWorker);\n  }\n\n  if (token() === SyntaxKind.EqualsGreaterThanToken) {\n    // ERROR RECOVERY TWEAK:\n    // If we see a standalone => try to parse it as an arrow function expression as that's\n    // likely what the user intended to write.\n    return Tristate.True;\n  }\n  // Definitely not a parenthesized arrow function.\n  return Tristate.False;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u8981\u7d04\u3059\u308b\u3068\u3001TypeScript \u306e\u30d1\u30fc\u30b5\u30fc\u306f\u3001\u5148\u8aad\u307f\uff08\u9ad8\u901f\u30d1\u30b9\uff09\u3068\u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u4f7f\u7528\u3057\u3066\u3001\u30a2\u30ed\u30fc\u95a2\u6570\u3092\u89e3\u6790\u3057\u307e\u3059\u3002"})]})}function l(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},7660:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>a});var t=r(959);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);