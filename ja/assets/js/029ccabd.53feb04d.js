"use strict";(self.webpackChunkjavascript_parser_in_rust=self.webpackChunkjavascript_parser_in_rust||[]).push([[478],{5913:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var s=r(1527),t=r(7660);const a={id:"parser",title:"\u69cb\u6587\u89e3\u6790\u5668 (\u30d1\u30fc\u30b5\u30fc)"},c=void 0,i={id:"parser",title:"\u69cb\u6587\u89e3\u6790\u5668 (\u30d1\u30fc\u30b5\u30fc)",description:"\u79c1\u305f\u3061\u304c\u69cb\u7bc9\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u30d1\u30fc\u30b5\u30fc\u306f\u3001\u518d\u5e30\u4e0b\u964d\u69cb\u6587\u89e3\u6790 \u3068\u547c\u3070\u308c\u3001\u6587\u6cd5\u3092\u4e0b\u964d\u3057\u3066 AST \u3092\u69cb\u7bc9\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/parser.md",sourceDirName:".",slug:"/parser",permalink:"/javascript-parser-in-rust/ja/docs/parser",draft:!1,unlisted:!1,editUrl:"https://github.com/oxc-project/javascript-parser-in-rust/tree/main/docs/parser.md",tags:[],version:"current",frontMatter:{id:"parser",title:"\u69cb\u6587\u89e3\u6790\u5668 (\u30d1\u30fc\u30b5\u30fc)"},sidebar:"tutorialSidebar",previous:{title:"\u62bd\u8c61\u69cb\u6587\u6728 (AST)",permalink:"/javascript-parser-in-rust/ja/docs/ast"},next:{title:"\u30a8\u30e9\u30fc\u51e6\u7406",permalink:"/javascript-parser-in-rust/ja/docs/errors"}},o={},d=[{value:"\u30d8\u30eb\u30d1\u30fc\u95a2\u6570",id:"\u30d8\u30eb\u30d1\u30fc\u95a2\u6570",level:2},{value:"parse \u95a2\u6570",id:"parse-\u95a2\u6570",level:2},{value:"\u5f0f\u306e\u30d1\u30fc\u30b9",id:"\u5f0f\u306e\u30d1\u30fc\u30b9",level:2},{value:"\u30ea\u30b9\u30c8",id:"\u30ea\u30b9\u30c8",level:2},{value:"Cover Grammar",id:"cover-grammar",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["\u79c1\u305f\u3061\u304c\u69cb\u7bc9\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u30d1\u30fc\u30b5\u30fc\u306f\u3001",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Recursive_descent_parser",children:"\u518d\u5e30\u4e0b\u964d\u69cb\u6587\u89e3\u6790"})," \u3068\u547c\u3070\u308c\u3001\u6587\u6cd5\u3092\u4e0b\u964d\u3057\u3066 AST \u3092\u69cb\u7bc9\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u30d1\u30fc\u30b5\u30fc\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3001\u30ec\u30ad\u30b5\u30fc\u3001\u30ec\u30ad\u30b5\u30fc\u304b\u3089\u8fd4\u3055\u308c\u305f\u73fe\u5728\u306e\u30c8\u30fc\u30af\u30f3\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"pub struct Parser<'a> {\n    /// \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n    source: &'a str,\n\n    lexer: Lexer<'a>,\n\n    /// \u30ec\u30ad\u30b5\u30fc\u304b\u3089\u8fd4\u3055\u308c\u305f\u73fe\u5728\u306e\u30c8\u30fc\u30af\u30f3\n    cur_token: Token,\n\n    /// \u524d\u306e\u30c8\u30fc\u30af\u30f3\u306e\u7d42\u4e86\u7bc4\u56f2\n    prev_token_end: usize,\n}\n\nimpl<'a> Parser<'a> {\n    pub fn new(source: &'a str) -> Self {\n        Self {\n            source,\n            lexer: Lexer::new(source),\n            cur_token: Token::default(),\n        }\n    }\n\n    pub fn parse(&mut self) -> Program<'a> {\n        Ok(Program {\n            node: Node {\n                start: 0,\n                end: self.source.len(),\n            },\n            body: vec![],\n        })\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u30d8\u30eb\u30d1\u30fc\u95a2\u6570",children:"\u30d8\u30eb\u30d1\u30fc\u95a2\u6570"}),"\n",(0,s.jsxs)(n.p,{children:["\u73fe\u5728\u306e\u30c8\u30fc\u30af\u30f3 ",(0,s.jsx)(n.code,{children:"cur_token: Token"})," \u306f\u3001\u30ec\u30ad\u30b5\u30fc\u304b\u3089\u8fd4\u3055\u308c\u305f\u73fe\u5728\u306e\u30c8\u30fc\u30af\u30f3\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u30c8\u30fc\u30af\u30f3\u3092\u30ca\u30d3\u30b2\u30fc\u30c8\u3057\u305f\u308a\u8abf\u67fb\u3059\u308b\u305f\u3081\u306e\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u3066\u3001\u30d1\u30fc\u30b5\u30fc\u30b3\u30fc\u30c9\u3092\u3088\u308a\u30af\u30ea\u30fc\u30f3\u306b\u3057\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"impl<'a> Parser<'a> {\n    fn start_node(&self) -> Node {\n        let token = self.cur_token();\n        Node::new(token.start, 0)\n    }\n\n    fn finish_node(&self, node: Node) -> Node {\n        Node::new(node.start, self.prev_token_end)\n    }\n\n    fn cur_token(&self) -> &Token {\n        &self.cur_token\n    }\n\n    fn cur_kind(&self) -> Kind {\n        self.cur_token.kind\n    }\n\n    /// \u73fe\u5728\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c `Kind` \u306e\u30c8\u30fc\u30af\u30f3\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\n    fn at(&self, kind: Kind) -> bool {\n        self.cur_kind() == kind\n    }\n\n    /// `Kind` \u306b\u3044\u308b\u5834\u5408\u306b\u9032\u3081\u307e\u3059\n    fn bump(&mut self, kind: Kind) {\n        if self.at(kind) {\n            self.advance();\n        }\n    }\n\n    /// \u4efb\u610f\u306e\u30c8\u30fc\u30af\u30f3\u3092\u9032\u3081\u307e\u3059\n    fn bump_any(&mut self) {\n        self.advance();\n    }\n\n    /// `Kind` \u306b\u3044\u308b\u5834\u5408\u306b\u9032\u3081\u3066\u3001true \u3092\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f false \u3092\u8fd4\u3057\u307e\u3059\n    fn eat(&mut self, kind: Kind) -> bool {\n        if self.at(kind) {\n            self.advance();\n            return true;\n        }\n        false\n    }\n\n    /// \u6b21\u306e\u30c8\u30fc\u30af\u30f3\u306b\u79fb\u52d5\u3057\u307e\u3059\n    fn advance(&mut self) {\n        let token = self.lexer.next_token();\n        self.prev_token_end = self.cur_token.end;\n        self.cur_token = token;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"parse-\u95a2\u6570",children:"parse \u95a2\u6570"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"DebuggerStatement"})," \u306f\u30d1\u30fc\u30b9\u3059\u308b\u306e\u304c\u6700\u3082\u7c21\u5358\u306a\u6587\u306a\u306e\u3067\u3001\u30d1\u30fc\u30b9\u3057\u3066\u6709\u52b9\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8fd4\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"impl<'a> Parser<'a> {\n    pub fn parse(&mut self) -> Program {\n        let stmt = self.parse_debugger_statement();\n        let body = vec![stmt];\n        Program {\n            node: Node {\n                start: 0,\n                end: self.source.len(),\n            },\n            body,\n        }\n    }\n\n    fn parse_debugger_statement(&mut self) -> Statement {\n        let node = self.start_node();\n        // \u6ce8\u610f: \u30ec\u30ad\u30b5\u30fc\u304b\u3089\u8fd4\u3055\u308c\u308b\u30c8\u30fc\u30af\u30f3\u306f `Kind::Debugger` \u3067\u3059\u304c\u3001\u5f8c\u3067\u4fee\u6b63\u3057\u307e\u3059\u3002\n        self.bump_any();\n        Statement::DebuggerStatement {\n            node: self.finish_node(node),\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u4ed6\u306e\u3059\u3079\u3066\u306e\u30d1\u30fc\u30b9\u95a2\u6570\u306f\u3001\u3053\u308c\u3089\u306e\u57fa\u672c\u7684\u306a\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u3092\u57fa\u306b\u3057\u3066\u69cb\u7bc9\u3055\u308c\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u3001swc\u306e ",(0,s.jsx)(n.code,{children:"while"})," \u6587\u3092\u30d1\u30fc\u30b9\u3059\u308b\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",metastring:"reference",children:"https://github.com/swc-project/swc/blob/554b459e26b24202f66c3c58a110b3f26bbd13cd/crates/swc_ecma_parser/src/parser/stmt.rs#L952-L970\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u5f0f\u306e\u30d1\u30fc\u30b9",children:"\u5f0f\u306e\u30d1\u30fc\u30b9"}),"\n",(0,s.jsxs)(n.p,{children:["\u5f0f\u306e\u6587\u6cd5\u306f\u6df1\u304f\u30cd\u30b9\u30c8\u3055\u308c\u3066\u304a\u308a\u3001\u518d\u5e30\u7684\u3067\u3059\u3002\n\u3053\u308c\u306f\u3001\u9577\u3044\u5f0f\uff08\u305f\u3068\u3048\u3070\u3001",(0,s.jsx)(n.a,{href:"https://github.com/microsoft/TypeScript/blob/main/tests/cases/compiler/binderBinaryExpressionStressJs.ts",children:"\u3053\u306eTypeScript\u306e\u30c6\u30b9\u30c8"}),"\uff09\u3067\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u5f15\u304d\u8d77\u3053\u3059\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u518d\u5e30\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u3001Pratt\u30d1\u30fc\u30b7\u30f3\u30b0\u3068\u547c\u3070\u308c\u308b\u30c6\u30af\u30cb\u30c3\u30af\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u8a73\u7d30\u306a\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306f\u3001Rust-Analyzer \u306e\u4f5c\u8005\u306b\u3088\u3063\u3066\u66f8\u304b\u308c\u305f ",(0,s.jsx)(n.a,{href:"https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html",children:"\u3053\u3061\u3089"})," \u3067\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001Rust\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f ",(0,s.jsx)(n.a,{href:"https://github.com/rome/tools/blob/5a059c0413baf1d54436ac0c149a829f0dfd1f4d/crates/rome_js_parser/src/syntax/expr.rs#L442",children:"Rome"})," \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.h2,{id:"\u30ea\u30b9\u30c8",children:"\u30ea\u30b9\u30c8"}),"\n",(0,s.jsxs)(n.p,{children:["\u533a\u5207\u308a\u8a18\u53f7\u3067\u533a\u5207\u3089\u308c\u305f\u30ea\u30b9\u30c8\u3092\u30d1\u30fc\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u6240\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001",(0,s.jsx)(n.code,{children:"[a, b, c]"})," \u3084 ",(0,s.jsx)(n.code,{children:"{a, b, c}"})," \u3067\u3059\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u30ea\u30b9\u30c8\u306e\u30d1\u30fc\u30b9\u306e\u30b3\u30fc\u30c9\u306f\u3059\u3079\u3066\u4f3c\u3066\u3044\u308b\u305f\u3081\u3001",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Template_method_pattern",children:"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u30d1\u30bf\u30fc\u30f3"})," \u3092\u4f7f\u7528\u3057\u3066\u91cd\u8907\u3092\u907f\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",metastring:"reference",children:"https://github.com/rome/tools/blob/85ddb4b2c622cac9638d5230dcefb6cf571677f8/crates/rome_js_parser/src/parser/parse_lists.rs#L131-L157\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306f\u3001\u7279\u306b ",(0,s.jsx)(n.code,{children:"progress.assert_progressing(p);"})," \u306e\u3088\u3046\u306a\u7121\u9650\u30eb\u30fc\u30d7\u3092\u9632\u3050\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u305d\u306e\u5f8c\u3001\u7570\u306a\u308b\u30ea\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\u306e\u8a73\u7d30\u3092\u63d0\u4f9b\u3067\u304d\u307e\u3059\u3002\u305f\u3068\u3048\u3070\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",metastring:"reference",children:"https://github.com/rome/tools/blob/85ddb4b2c622cac9638d5230dcefb6cf571677f8/crates/rome_js_parser/src/syntax/expr.rs#L1543-L1580\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cover-grammar",children:"Cover Grammar"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/blog/grammar#cover-grammar",children:"Cover Grammar"})," \u3067\u8a73\u7d30\u306b\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001",(0,s.jsx)(n.code,{children:"Expression"})," \u3092 ",(0,s.jsx)(n.code,{children:"BindingIdentifier"})," \u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002JavaScript \u306e\u3088\u3046\u306a\u52d5\u7684\u8a00\u8a9e\u3067\u306f\u3001\u30ce\u30fc\u30c9\u306e\u30bf\u30a4\u30d7\u3092\u5358\u7d14\u306b\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:"reference",children:"https://github.com/acornjs/acorn/blob/11735729c4ebe590e406f952059813f250a4cbd1/acorn/src/lval.js#L11-L26\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u3057\u304b\u3057\u3001Rust \u3067\u306f\u3001\u69cb\u9020\u4f53\u304b\u3089\u69cb\u9020\u4f53\u3078\u306e\u5909\u63db\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u884c\u3046\u305f\u3081\u306e\u304d\u308c\u3044\u3067\u30b7\u30f3\u30d7\u30eb\u306a\u65b9\u6cd5\u306f\u3001\u30c8\u30ec\u30a4\u30c8\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"pub trait CoverGrammar<'a, T>: Sized {\n    fn cover(value: T, p: &mut Parser<'a>) -> Result<Self>;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u3053\u306e\u30c8\u30ec\u30a4\u30c8\u306f\u3001\u5165\u529b\u578b\u3068\u3057\u3066 ",(0,s.jsx)(n.code,{children:"T"})," \u3092\u53d7\u3051\u5165\u308c\u3001\u51fa\u529b\u578b\u3068\u3057\u3066 ",(0,s.jsx)(n.code,{children:"Self"})," \u3092\u53d7\u3051\u5165\u308c\u308b\u305f\u3081\u3001\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"impl<'a> CoverGrammar<'a, Expression<'a>> for BindingPattern<'a> {\n    fn cover(expr: Expression<'a>, p: &mut Parser<'a>) -> Result<Self> {\n        match expr {\n            Expression::Identifier(ident) => Self::cover(ident.unbox(), p),\n            Expression::ObjectExpression(expr) => Self::cover(expr.unbox(), p),\n            Expression::ArrayExpression(expr) => Self::cover(expr.unbox(), p),\n            _ => Err(()),\n        }\n    }\n}\n\nimpl<'a> CoverGrammar<'a, ObjectExpression<'a>> for BindingPattern<'a> {\n    fn cover(obj_expr: ObjectExpression<'a>, p: &mut Parser<'a>) -> Result<Self> {\n        ...\n        BindingIdentifier::ObjectPattern(ObjectPattern { .. })\n    }\n}\n\nimpl<'a> CoverGrammar<'a, ArrayExpression<'a>> for BindingPattern<'a> {\n    fn cover(expr: ArrayExpression<'a>, p: &mut Parser<'a>) -> Result<Self> {\n        ...\n        BindingIdentifier::ArrayPattern(ArrayPattern { .. })\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u305d\u306e\u5f8c\u3001",(0,s.jsx)(n.code,{children:"Expression"})," \u3092 ",(0,s.jsx)(n.code,{children:"BindingPattern"})," \u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u6240\u3067\u306f\u3001",(0,s.jsx)(n.code,{children:"BindingPattern::cover(expression)"})," \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002"]})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},7660:(e,n,r)=>{r.d(n,{Z:()=>i,a:()=>c});var s=r(959);const t={},a=s.createContext(t);function c(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);